package sunaba.godot;

import sunaba.core.NativeEvent;

@:native("godot.ParticleProcessMaterial")
extern class ParticleProcessMaterial extends Material {
    public var alphaCurve: Texture2D;
    public var angleCurve: Texture2D;
    public var angleMax: Float;
    public var angleMin: Float;
    public var angularVelocityCurve: Texture2D;
    public var angularVelocityMax: Float;
    public var angularVelocityMin: Float;
    public var animOffsetCurve: Texture2D;
    public var animOffsetMax: Float;
    public var animOffsetMin: Float;
    public var animSpeedCurve: Texture2D;
    public var animSpeedMax: Float;
    public var animSpeedMin: Float;
    public var attractorInteractionEnabled: Bool;
    public var collisionBounce: Float;
    public var collisionFriction: Float;
    public var collisionMode: Int;
    public var collisionUseScale: Bool;
    public var color: Color;
    public var colorInitialRamp: Texture2D;
    public var colorRamp: Texture2D;
    public var dampingCurve: Texture2D;
    public var dampingMax: Float;
    public var dampingMin: Float;
    public var direction: Vector3;
    public var directionalVelocityCurve: Texture2D;
    public var directionalVelocityMax: Float;
    public var directionalVelocityMin: Float;
    public var emissionBoxExtents: Vector3;
    public var emissionColorTexture: Texture2D;
    public var emissionCurve: Texture2D;
    public var emissionNormalTexture: Texture2D;
    public var emissionPointCount: Int;
    public var emissionPointTexture: Texture2D;
    public var emissionRingAxis: Vector3;
    public var emissionRingConeAngle: Float;
    public var emissionRingHeight: Float;
    public var emissionRingInnerRadius: Float;
    public var emissionRingRadius: Float;
    public var emissionShape: Int;
    public var emissionShapeOffset: Vector3;
    public var emissionShapeScale: Vector3;
    public var emissionSphereRadius: Float;
    public var flatness: Float;
    public var gravity: Vector3;
    public var hueVariationCurve: Texture2D;
    public var hueVariationMax: Float;
    public var hueVariationMin: Float;
    public var inheritVelocityRatio: Float;
    public var initialVelocityMax: Float;
    public var initialVelocityMin: Float;
    public var lifetimeRandomness: Float;
    public var linearAccelCurve: Texture2D;
    public var linearAccelMax: Float;
    public var linearAccelMin: Float;
    public var orbitVelocityCurve: Texture2D;
    public var orbitVelocityMax: Float;
    public var orbitVelocityMin: Float;
    public var particleFlagAlignY: Bool;
    public var particleFlagDampingAsFriction: Bool;
    public var particleFlagDisableZ: Bool;
    public var particleFlagRotateY: Bool;
    public var radialAccelCurve: Texture2D;
    public var radialAccelMax: Float;
    public var radialAccelMin: Float;
    public var radialVelocityCurve: Texture2D;
    public var radialVelocityMax: Float;
    public var radialVelocityMin: Float;
    public var scaleCurve: Texture2D;
    public var scaleMax: Float;
    public var scaleMin: Float;
    public var scaleOverVelocityCurve: Texture2D;
    public var scaleOverVelocityMax: Float;
    public var scaleOverVelocityMin: Float;
    public var spread: Float;
    public var subEmitterAmountAtCollision: Int;
    public var subEmitterAmountAtEnd: Int;
    public var subEmitterAmountAtStart: Int;
    public var subEmitterFrequency: Float;
    public var subEmitterKeepVelocity: Bool;
    public var subEmitterMode: Int;
    public var tangentialAccelCurve: Texture2D;
    public var tangentialAccelMax: Float;
    public var tangentialAccelMin: Float;
    public var turbulenceEnabled: Bool;
    public var turbulenceInfluenceMax: Float;
    public var turbulenceInfluenceMin: Float;
    public var turbulenceInfluenceOverLife: Texture2D;
    public var turbulenceInitialDisplacementMax: Float;
    public var turbulenceInitialDisplacementMin: Float;
    public var turbulenceNoiseScale: Float;
    public var turbulenceNoiseSpeed: Vector3;
    public var turbulenceNoiseSpeedRandom: Float;
    public var turbulenceNoiseStrength: Float;
    public var velocityLimitCurve: Texture2D;
    public var velocityPivot: Vector3;
    @:native("__new")
    public function new();
    public function getParam(param: Int): Vector2;
    public function getParamMax(param: Int): Float;
    public function getParamMin(param: Int): Float;
    public function getParamTexture(param: Int): Texture2D;
    public function getParticleFlag(particleFlag: Int): Bool;
    public function setParam(param: Int, value: GdVector2): Void;
    public function setParamMax(param: Int, value: Float): Void;
    public function setParamMin(param: Int, value: Float): Void;
    public function setParamTexture(param: Int, texture: Texture2D): Void;
    public function setParticleFlag(particleFlag: Int, enable: Bool): Void;
    public var emissionShapeChanged: NativeEvent;
}
