package sunaba.godot;

import sunaba.core.NativeEvent;

@:native("godot.OS")
extern class OS extends Object {
    public static var deltaSmoothing: Bool;
    public static var lowProcessorUsageMode: Bool;
    public static var lowProcessorUsageModeSleepUsec: Int;
    @:native("__new")
    public function new();
    public static function alert(text: String, ?title: String): Void;
    public static function closeMidiInputs(): Void;
    public static function crash(message: String): Void;
    public static function createInstance(arguments: PackedStringArray): Int;
    public static function createProcess(path: String, arguments: PackedStringArray, openConsole: Bool = false): Int;
    public static function delayMsec(msec: Int): Void;
    public static function delayUsec(usec: Int): Void;
    public static function execute(path: String, arguments: PackedStringArray, ?output: Array<Dynamic>, readStderr: Bool = false, openConsole: Bool = false): Int;
    public static function executeWithPipe(path: String, arguments: PackedStringArray, blocking: Bool = true): Map<Dynamic, Dynamic>;
    public static function findKeycodeFromString(string: String): Int;
    public static function getCacheDir(): String;
    public static function getCmdlineArgs(): PackedStringArray;
    public static function getCmdlineUserArgs(): PackedStringArray;
    public static function getConfigDir(): String;
    public static function getConnectedMidiInputs(): PackedStringArray;
    public static function getDataDir(): String;
    public static function getDistributionName(): String;
    public static function getEntropy(size: Int): PackedByteArray;
    public static function getEnvironment(variable: String): String;
    public static function getExecutablePath(): String;
    public static function getGrantedPermissions(): PackedStringArray;
    public static function getKeycodeString(code: Int): String;
    public static function getLocale(): String;
    public static function getLocaleLanguage(): String;
    public static function getMainThreadId(): Int;
    public static function getMemoryInfo(): Map<Dynamic, Dynamic>;
    public static function getModelName(): String;
    public static function getName(): String;
    public static function getProcessExitCode(pid: Int): Int;
    public static function getProcessId(): Int;
    public static function getProcessorCount(): Int;
    public static function getProcessorName(): String;
    public static function getRestartOnExitArguments(): PackedStringArray;
    public static function getStaticMemoryPeakUsage(): Int;
    public static function getStaticMemoryUsage(): Int;
    public static function getStderrType(): Int;
    public static function getStdinType(): Int;
    public static function getStdoutType(): Int;
    public static function getSystemCaCertificates(): String;
    public static function getSystemDir(dir: Int, sharedStorage: Bool = true): String;
    public static function getSystemFontPath(fontName: String, weight: Int = 400, stretch: Int = 100, italic: Bool = false): String;
    public static function getSystemFontPathForText(fontName: String, text: String, ?locale: String, ?script: String, weight: Int = 400, stretch: Int = 100, italic: Bool = false): PackedStringArray;
    public static function getSystemFonts(): PackedStringArray;
    public static function getTempDir(): String;
    public static function getThreadCallerId(): Int;
    public static function getUniqueId(): String;
    public static function getUserDataDir(): String;
    public static function getVersion(): String;
    public static function getVersionAlias(): String;
    public static function getVideoAdapterDriverInfo(): PackedStringArray;
    public static function hasEnvironment(variable: String): Bool;
    public static function hasFeature(tagName: String): Bool;
    public static function isDebugBuild(): Bool;
    public static function isKeycodeUnicode(code: Int): Bool;
    public static function isProcessRunning(pid: Int): Bool;
    public static function isRestartOnExitSet(): Bool;
    public static function isSandboxed(): Bool;
    public static function isStdoutVerbose(): Bool;
    public static function isUserfsPersistent(): Bool;
    public static function kill(pid: Int): Int;
    public static function moveToTrash(path: String): Int;
    public static function openMidiInputs(): Void;
    public static function readBufferFromStdin(bufferSize: Int): PackedByteArray;
    public static function readStringFromStdin(bufferSize: Int): String;
    public static function requestPermission(name: String): Bool;
    public static function requestPermissions(): Bool;
    public static function revokeGrantedPermissions(): Void;
    public static function setEnvironment(variable: String, value: String): Void;
    public static function setRestartOnExit(restart: Bool, ?arguments: PackedStringArray): Void;
    public static function setThreadName(name: String): Int;
    public static function setUseFileAccessSaveAndSwap(enabled: Bool): Void;
    public static function shellOpen(uri: String): Int;
    public static function shellShowInFileManager(fileOrDirPath: String, openFolder: Bool = true): Int;
    public static function unsetEnvironment(variable: String): Void;
}
