package sunaba.godot;

import sunaba.core.NativeEvent;

@:native("godot.NavigationServer2D")
extern class NavigationServer2D extends Object {
    @:native("__new")
    public function new();
    public function agentCreate(): RID;
    public function agentGetAvoidanceEnabled(agent: RID): Bool;
    public function agentGetAvoidanceLayers(agent: RID): Int;
    public function agentGetAvoidanceMask(agent: RID): Int;
    public function agentGetAvoidancePriority(agent: RID): Float;
    public function agentGetMap(agent: RID): RID;
    public function agentGetMaxNeighbors(agent: RID): Int;
    public function agentGetMaxSpeed(agent: RID): Float;
    public function agentGetNeighborDistance(agent: RID): Float;
    public function agentGetPaused(agent: RID): Bool;
    public function agentGetPosition(agent: RID): Vector2;
    public function agentGetRadius(agent: RID): Float;
    public function agentGetTimeHorizonAgents(agent: RID): Float;
    public function agentGetTimeHorizonObstacles(agent: RID): Float;
    public function agentGetVelocity(agent: RID): Vector2;
    public function agentHasAvoidanceCallback(agent: RID): Bool;
    public function agentIsMapChanged(agent: RID): Bool;
    public function agentSetAvoidanceCallback(agent: RID, callback: Callable): Void;
    public function agentSetAvoidanceEnabled(agent: RID, enabled: Bool): Void;
    public function agentSetAvoidanceLayers(agent: RID, layers: Int): Void;
    public function agentSetAvoidanceMask(agent: RID, mask: Int): Void;
    public function agentSetAvoidancePriority(agent: RID, priority: Float): Void;
    public function agentSetMap(agent: RID, map: RID): Void;
    public function agentSetMaxNeighbors(agent: RID, count: Int): Void;
    public function agentSetMaxSpeed(agent: RID, maxSpeed: Float): Void;
    public function agentSetNeighborDistance(agent: RID, distance: Float): Void;
    public function agentSetPaused(agent: RID, paused: Bool): Void;
    public function agentSetPosition(agent: RID, position: GdVector2): Void;
    public function agentSetRadius(agent: RID, radius: Float): Void;
    public function agentSetTimeHorizonAgents(agent: RID, timeHorizon: Float): Void;
    public function agentSetTimeHorizonObstacles(agent: RID, timeHorizon: Float): Void;
    public function agentSetVelocity(agent: RID, velocity: GdVector2): Void;
    public function agentSetVelocityForced(agent: RID, velocity: GdVector2): Void;
    public function bakeFromSourceGeometryData(navigationPolygon: NavigationPolygon, sourceGeometryData: NavigationMeshSourceGeometryData2D, callback: Callable): Void;
    public function bakeFromSourceGeometryDataAsync(navigationPolygon: NavigationPolygon, sourceGeometryData: NavigationMeshSourceGeometryData2D, callback: Callable): Void;
    public function freeRid(rid: RID): Void;
    public function getDebugEnabled(): Bool;
    public function getMaps(): Dynamic;
    public function isBakingNavigationPolygon(navigationPolygon: NavigationPolygon): Bool;
    public function linkCreate(): RID;
    public function linkGetEnabled(link: RID): Bool;
    public function linkGetEndPosition(link: RID): Vector2;
    public function linkGetEnterCost(link: RID): Float;
    public function linkGetMap(link: RID): RID;
    public function linkGetNavigationLayers(link: RID): Int;
    public function linkGetOwnerId(link: RID): Int;
    public function linkGetStartPosition(link: RID): Vector2;
    public function linkGetTravelCost(link: RID): Float;
    public function linkIsBidirectional(link: RID): Bool;
    public function linkSetBidirectional(link: RID, bidirectional: Bool): Void;
    public function linkSetEnabled(link: RID, enabled: Bool): Void;
    public function linkSetEndPosition(link: RID, position: GdVector2): Void;
    public function linkSetEnterCost(link: RID, enterCost: Float): Void;
    public function linkSetMap(link: RID, map: RID): Void;
    public function linkSetNavigationLayers(link: RID, navigationLayers: Int): Void;
    public function linkSetOwnerId(link: RID, ownerId: Int): Void;
    public function linkSetStartPosition(link: RID, position: GdVector2): Void;
    public function linkSetTravelCost(link: RID, travelCost: Float): Void;
    public function mapCreate(): RID;
    public function mapForceUpdate(map: RID): Void;
    public function mapGetAgents(map: RID): Dynamic;
    public function mapGetCellSize(map: RID): Float;
    public function mapGetClosestPoint(map: RID, toPoint: GdVector2): Vector2;
    public function mapGetClosestPointOwner(map: RID, toPoint: GdVector2): RID;
    public function mapGetEdgeConnectionMargin(map: RID): Float;
    public function mapGetIterationId(map: RID): Int;
    public function mapGetLinkConnectionRadius(map: RID): Float;
    public function mapGetLinks(map: RID): Dynamic;
    public function mapGetObstacles(map: RID): Dynamic;
    public function mapGetPath(map: RID, origin: GdVector2, destination: GdVector2, optimize: Bool, navigationLayers: Int = 1): PackedVector2Array;
    public function mapGetRandomPoint(map: RID, navigationLayers: Int, uniformly: Bool): Vector2;
    public function mapGetRegions(map: RID): Dynamic;
    public function mapGetUseAsyncIterations(map: RID): Bool;
    public function mapGetUseEdgeConnections(map: RID): Bool;
    public function mapIsActive(map: RID): Bool;
    public function mapSetActive(map: RID, active: Bool): Void;
    public function mapSetCellSize(map: RID, cellSize: Float): Void;
    public function mapSetEdgeConnectionMargin(map: RID, margin: Float): Void;
    public function mapSetLinkConnectionRadius(map: RID, radius: Float): Void;
    public function mapSetUseAsyncIterations(map: RID, enabled: Bool): Void;
    public function mapSetUseEdgeConnections(map: RID, enabled: Bool): Void;
    public function obstacleCreate(): RID;
    public function obstacleGetAvoidanceEnabled(obstacle: RID): Bool;
    public function obstacleGetAvoidanceLayers(obstacle: RID): Int;
    public function obstacleGetMap(obstacle: RID): RID;
    public function obstacleGetPaused(obstacle: RID): Bool;
    public function obstacleGetPosition(obstacle: RID): Vector2;
    public function obstacleGetRadius(obstacle: RID): Float;
    public function obstacleGetVelocity(obstacle: RID): Vector2;
    public function obstacleGetVertices(obstacle: RID): PackedVector2Array;
    public function obstacleSetAvoidanceEnabled(obstacle: RID, enabled: Bool): Void;
    public function obstacleSetAvoidanceLayers(obstacle: RID, layers: Int): Void;
    public function obstacleSetMap(obstacle: RID, map: RID): Void;
    public function obstacleSetPaused(obstacle: RID, paused: Bool): Void;
    public function obstacleSetPosition(obstacle: RID, position: GdVector2): Void;
    public function obstacleSetRadius(obstacle: RID, radius: Float): Void;
    public function obstacleSetVelocity(obstacle: RID, velocity: GdVector2): Void;
    public function obstacleSetVertices(obstacle: RID, vertices: PackedVector2Array): Void;
    public function parseSourceGeometryData(navigationPolygon: NavigationPolygon, sourceGeometryData: NavigationMeshSourceGeometryData2D, rootNode: Node, callback: Callable): Void;
    public function queryPath(parameters: NavigationPathQueryParameters2D, result: NavigationPathQueryResult2D, callback: Callable): Void;
    public function regionCreate(): RID;
    public function regionGetBounds(region: RID): Rect2;
    public function regionGetClosestPoint(region: RID, toPoint: GdVector2): Vector2;
    public function regionGetConnectionPathwayEnd(region: RID, connection: Int): Vector2;
    public function regionGetConnectionPathwayStart(region: RID, connection: Int): Vector2;
    public function regionGetConnectionsCount(region: RID): Int;
    public function regionGetEnabled(region: RID): Bool;
    public function regionGetEnterCost(region: RID): Float;
    public function regionGetMap(region: RID): RID;
    public function regionGetNavigationLayers(region: RID): Int;
    public function regionGetOwnerId(region: RID): Int;
    public function regionGetRandomPoint(region: RID, navigationLayers: Int, uniformly: Bool): Vector2;
    public function regionGetTransform(region: RID): Transform2D;
    public function regionGetTravelCost(region: RID): Float;
    public function regionGetUseEdgeConnections(region: RID): Bool;
    public function regionOwnsPoint(region: RID, point: GdVector2): Bool;
    public function regionSetEnabled(region: RID, enabled: Bool): Void;
    public function regionSetEnterCost(region: RID, enterCost: Float): Void;
    public function regionSetMap(region: RID, map: RID): Void;
    public function regionSetNavigationLayers(region: RID, navigationLayers: Int): Void;
    public function regionSetNavigationPolygon(region: RID, navigationPolygon: NavigationPolygon): Void;
    public function regionSetOwnerId(region: RID, ownerId: Int): Void;
    public function regionSetTransform(region: RID, transform: Transform2D): Void;
    public function regionSetTravelCost(region: RID, travelCost: Float): Void;
    public function regionSetUseEdgeConnections(region: RID, enabled: Bool): Void;
    public function setDebugEnabled(enabled: Bool): Void;
    public function simplifyPath(path: PackedVector2Array, epsilon: Float): PackedVector2Array;
    public function sourceGeometryParserCreate(): RID;
    public function sourceGeometryParserSetCallback(parser: RID, callback: Callable): Void;
    public var mapChanged: NativeEvent;
    public var navigationDebugChanged: NativeEvent;
}
