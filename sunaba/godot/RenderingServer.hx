package sunaba.godot;

import sunaba.core.NativeEvent;

@:native("godot.RenderingServer")
extern class RenderingServer extends Object {
    public var renderLoopEnabled: Bool;
    @:native("__new")
    public function new();
    public static function bakeRenderUv2(base: RID, materialOverrides: Dynamic, imageSize: GdVector2i): Dynamic;
    public static function callOnRenderThread(callable: Callable): Void;
    public static function cameraAttributesCreate(): RID;
    public static function cameraAttributesSetAutoExposure(cameraAttributes: RID, enable: Bool, minSensitivity: Float, maxSensitivity: Float, speed: Float, scale: Float): Void;
    public static function cameraAttributesSetDofBlur(cameraAttributes: RID, farEnable: Bool, farDistance: Float, farTransition: Float, nearEnable: Bool, nearDistance: Float, nearTransition: Float, amount: Float): Void;
    public static function cameraAttributesSetDofBlurBokehShape(shape: Int): Void;
    public static function cameraAttributesSetDofBlurQuality(quality: Int, useJitter: Bool): Void;
    public static function cameraAttributesSetExposure(cameraAttributes: RID, multiplier: Float, normalization: Float): Void;
    public static function cameraCreate(): RID;
    public static function cameraSetCameraAttributes(camera: RID, effects: RID): Void;
    public static function cameraSetCompositor(camera: RID, compositor: RID): Void;
    public static function cameraSetCullMask(camera: RID, layers: Int): Void;
    public static function cameraSetEnvironment(camera: RID, env: RID): Void;
    public static function cameraSetFrustum(camera: RID, size: Float, offset: GdVector2, zNear: Float, zFar: Float): Void;
    public static function cameraSetOrthogonal(camera: RID, size: Float, zNear: Float, zFar: Float): Void;
    public static function cameraSetPerspective(camera: RID, fovyDegrees: Float, zNear: Float, zFar: Float): Void;
    public static function cameraSetTransform(camera: RID, transform: Transform3D): Void;
    public static function cameraSetUseVerticalAspect(camera: RID, enable: Bool): Void;
    public static function canvasCreate(): RID;
    public static function canvasItemAddAnimationSlice(item: RID, animationLength: Float, sliceBegin: Float, sliceEnd: Float, offset: Float = 0.0): Void;
    public static function canvasItemAddCircle(item: RID, pos: GdVector2, radius: Float, color: Color, antialiased: Bool = false): Void;
    public static function canvasItemAddClipIgnore(item: RID, ignore: Bool): Void;
    public static function canvasItemAddLcdTextureRectRegion(item: RID, rect: Rect2, texture: RID, srcRect: Rect2, modulate: Color): Void;
    public static function canvasItemAddLine(item: RID, from: GdVector2, to: GdVector2, color: Color, width: Float = -1.0, antialiased: Bool = false): Void;
    public static function canvasItemAddMesh(item: RID, mesh: RID, ?transform: Transform2D, ?modulate: Color, ?texture: RID): Void;
    public static function canvasItemAddMsdfTextureRectRegion(item: RID, rect: Rect2, texture: RID, srcRect: Rect2, ?modulate: Color, outlineSize: Int = 0, pxRange: Float = 1.0, scale: Float = 1.0): Void;
    public static function canvasItemAddMultiline(item: RID, points: PackedVector2Array, colors: PackedColorArray, width: Float = -1.0, antialiased: Bool = false): Void;
    public static function canvasItemAddMultimesh(item: RID, mesh: RID, ?texture: RID): Void;
    public static function canvasItemAddNinePatch(item: RID, rect: Rect2, source: Rect2, texture: RID, topleft: GdVector2, bottomright: GdVector2, xAxisMode: Int = 0, yAxisMode: Int = 0, drawCenter: Bool = true, ?modulate: Color): Void;
    public static function canvasItemAddParticles(item: RID, particles: RID, texture: RID): Void;
    public static function canvasItemAddPolygon(item: RID, points: PackedVector2Array, colors: PackedColorArray, ?uvs: PackedVector2Array, ?texture: RID): Void;
    public static function canvasItemAddPolyline(item: RID, points: PackedVector2Array, colors: PackedColorArray, width: Float = -1.0, antialiased: Bool = false): Void;
    public static function canvasItemAddPrimitive(item: RID, points: PackedVector2Array, colors: PackedColorArray, uvs: PackedVector2Array, texture: RID): Void;
    public static function canvasItemAddRect(item: RID, rect: Rect2, color: Color, antialiased: Bool = false): Void;
    public static function canvasItemAddSetTransform(item: RID, transform: Transform2D): Void;
    public static function canvasItemAddTextureRect(item: RID, rect: Rect2, texture: RID, tile: Bool = false, ?modulate: Color, transpose: Bool = false): Void;
    public static function canvasItemAddTextureRectRegion(item: RID, rect: Rect2, texture: RID, srcRect: Rect2, ?modulate: Color, transpose: Bool = false, clipUv: Bool = true): Void;
    public static function canvasItemAddTriangleArray(item: RID, indices: PackedInt32Array, points: PackedVector2Array, colors: PackedColorArray, ?uvs: PackedVector2Array, ?bones: PackedInt32Array, ?weights: PackedFloat32Array, ?texture: RID, count: Int = -1): Void;
    public static function canvasItemAttachSkeleton(item: RID, skeleton: RID): Void;
    public static function canvasItemClear(item: RID): Void;
    public static function canvasItemCreate(): RID;
    public static function canvasItemGetInstanceShaderParameter(instance: RID, parameter: StringName): Variant;
    public static function canvasItemGetInstanceShaderParameterDefaultValue(instance: RID, parameter: StringName): Variant;
    public static function canvasItemGetInstanceShaderParameterList(instance: RID): Dynamic;
    public static function canvasItemResetPhysicsInterpolation(item: RID): Void;
    public static function canvasItemSetCanvasGroupMode(item: RID, mode: Int, clearMargin: Float = 5.0, fitEmpty: Bool = false, fitMargin: Float = 0.0, blurMipmaps: Bool = false): Void;
    public static function canvasItemSetClip(item: RID, clip: Bool): Void;
    public static function canvasItemSetCopyToBackbuffer(item: RID, enabled: Bool, rect: Rect2): Void;
    public static function canvasItemSetCustomRect(item: RID, useCustomRect: Bool, ?rect: Rect2): Void;
    public static function canvasItemSetDefaultTextureFilter(item: RID, filter: Int): Void;
    public static function canvasItemSetDefaultTextureRepeat(item: RID, repeat: Int): Void;
    public static function canvasItemSetDistanceFieldMode(item: RID, enabled: Bool): Void;
    public static function canvasItemSetDrawBehindParent(item: RID, enabled: Bool): Void;
    public static function canvasItemSetDrawIndex(item: RID, index: Int): Void;
    public static function canvasItemSetInstanceShaderParameter(instance: RID, parameter: StringName, value: Variant): Void;
    public static function canvasItemSetInterpolated(item: RID, interpolated: Bool): Void;
    public static function canvasItemSetLightMask(item: RID, mask: Int): Void;
    public static function canvasItemSetMaterial(item: RID, material: RID): Void;
    public static function canvasItemSetModulate(item: RID, color: Color): Void;
    public static function canvasItemSetParent(item: RID, parent: RID): Void;
    public static function canvasItemSetSelfModulate(item: RID, color: Color): Void;
    public static function canvasItemSetSortChildrenByY(item: RID, enabled: Bool): Void;
    public static function canvasItemSetTransform(item: RID, transform: Transform2D): Void;
    public static function canvasItemSetUseParentMaterial(item: RID, enabled: Bool): Void;
    public static function canvasItemSetVisibilityLayer(item: RID, visibilityLayer: Int): Void;
    public static function canvasItemSetVisibilityNotifier(item: RID, enable: Bool, area: Rect2, enterCallable: Callable, exitCallable: Callable): Void;
    public static function canvasItemSetVisible(item: RID, visible: Bool): Void;
    public static function canvasItemSetZAsRelativeToParent(item: RID, enabled: Bool): Void;
    public static function canvasItemSetZIndex(item: RID, zIndex: Int): Void;
    public static function canvasItemTransformPhysicsInterpolation(item: RID, transform: Transform2D): Void;
    public static function canvasLightAttachToCanvas(light: RID, canvas: RID): Void;
    public static function canvasLightCreate(): RID;
    public static function canvasLightOccluderAttachToCanvas(occluder: RID, canvas: RID): Void;
    public static function canvasLightOccluderCreate(): RID;
    public static function canvasLightOccluderResetPhysicsInterpolation(occluder: RID): Void;
    public static function canvasLightOccluderSetAsSdfCollision(occluder: RID, enable: Bool): Void;
    public static function canvasLightOccluderSetEnabled(occluder: RID, enabled: Bool): Void;
    public static function canvasLightOccluderSetInterpolated(occluder: RID, interpolated: Bool): Void;
    public static function canvasLightOccluderSetLightMask(occluder: RID, mask: Int): Void;
    public static function canvasLightOccluderSetPolygon(occluder: RID, polygon: RID): Void;
    public static function canvasLightOccluderSetTransform(occluder: RID, transform: Transform2D): Void;
    public static function canvasLightOccluderTransformPhysicsInterpolation(occluder: RID, transform: Transform2D): Void;
    public static function canvasLightResetPhysicsInterpolation(light: RID): Void;
    public static function canvasLightSetBlendMode(light: RID, mode: Int): Void;
    public static function canvasLightSetColor(light: RID, color: Color): Void;
    public static function canvasLightSetEnabled(light: RID, enabled: Bool): Void;
    public static function canvasLightSetEnergy(light: RID, energy: Float): Void;
    public static function canvasLightSetHeight(light: RID, height: Float): Void;
    public static function canvasLightSetInterpolated(light: RID, interpolated: Bool): Void;
    public static function canvasLightSetItemCullMask(light: RID, mask: Int): Void;
    public static function canvasLightSetItemShadowCullMask(light: RID, mask: Int): Void;
    public static function canvasLightSetLayerRange(light: RID, minLayer: Int, maxLayer: Int): Void;
    public static function canvasLightSetMode(light: RID, mode: Int): Void;
    public static function canvasLightSetShadowColor(light: RID, color: Color): Void;
    public static function canvasLightSetShadowEnabled(light: RID, enabled: Bool): Void;
    public static function canvasLightSetShadowFilter(light: RID, filter: Int): Void;
    public static function canvasLightSetShadowSmooth(light: RID, smooth: Float): Void;
    public static function canvasLightSetTexture(light: RID, texture: RID): Void;
    public static function canvasLightSetTextureOffset(light: RID, offset: GdVector2): Void;
    public static function canvasLightSetTextureScale(light: RID, scale: Float): Void;
    public static function canvasLightSetTransform(light: RID, transform: Transform2D): Void;
    public static function canvasLightSetZRange(light: RID, minZ: Int, maxZ: Int): Void;
    public static function canvasLightTransformPhysicsInterpolation(light: RID, transform: Transform2D): Void;
    public static function canvasOccluderPolygonCreate(): RID;
    public static function canvasOccluderPolygonSetCullMode(occluderPolygon: RID, mode: Int): Void;
    public static function canvasOccluderPolygonSetShape(occluderPolygon: RID, shape: PackedVector2Array, closed: Bool): Void;
    public static function canvasSetDisableScale(disable: Bool): Void;
    public static function canvasSetItemMirroring(canvas: RID, item: RID, mirroring: GdVector2): Void;
    public static function canvasSetItemRepeat(item: RID, repeatSize: GdVector2, repeatTimes: Int): Void;
    public static function canvasSetModulate(canvas: RID, color: Color): Void;
    public static function canvasSetShadowTextureSize(size: Int): Void;
    public static function canvasTextureCreate(): RID;
    public static function canvasTextureSetChannel(canvasTexture: RID, channel: Int, texture: RID): Void;
    public static function canvasTextureSetShadingParameters(canvasTexture: RID, baseColor: Color, shininess: Float): Void;
    public static function canvasTextureSetTextureFilter(canvasTexture: RID, filter: Int): Void;
    public static function canvasTextureSetTextureRepeat(canvasTexture: RID, repeat: Int): Void;
    public static function compositorCreate(): RID;
    public static function compositorEffectCreate(): RID;
    public static function compositorEffectSetCallback(effect: RID, callbackType: Int, callback: Callable): Void;
    public static function compositorEffectSetEnabled(effect: RID, enabled: Bool): Void;
    public static function compositorEffectSetFlag(effect: RID, flag: Int, set: Bool): Void;
    public static function compositorSetCompositorEffects(compositor: RID, effects: Dynamic): Void;
    public static function createLocalRenderingDevice(): RenderingDevice;
    public static function debugCanvasItemGetRect(item: RID): Rect2;
    public static function decalCreate(): RID;
    public static function decalSetAlbedoMix(decal: RID, albedoMix: Float): Void;
    public static function decalSetCullMask(decal: RID, mask: Int): Void;
    public static function decalSetDistanceFade(decal: RID, enabled: Bool, begin: Float, length: Float): Void;
    public static function decalSetEmissionEnergy(decal: RID, energy: Float): Void;
    public static function decalSetFade(decal: RID, above: Float, below: Float): Void;
    public static function decalSetModulate(decal: RID, color: Color): Void;
    public static function decalSetNormalFade(decal: RID, fade: Float): Void;
    public static function decalSetSize(decal: RID, size: GdVector3): Void;
    public static function decalSetTexture(decal: RID, type: Int, texture: RID): Void;
    public static function decalsSetFilter(filter: Int): Void;
    public static function directionalLightCreate(): RID;
    public static function directionalShadowAtlasSetSize(size: Int, is16bits: Bool): Void;
    public static function directionalSoftShadowFilterSetQuality(quality: Int): Void;
    public static function environmentBakePanorama(environment: RID, bakeIrradiance: Bool, size: GdVector2i): Image;
    public static function environmentCreate(): RID;
    public static function environmentGlowSetUseBicubicUpscale(enable: Bool): Void;
    public static function environmentSetAdjustment(env: RID, enable: Bool, brightness: Float, contrast: Float, saturation: Float, use1dColorCorrection: Bool, colorCorrection: RID): Void;
    public static function environmentSetAmbientLight(env: RID, color: Color, ambient: Int = 0, energy: Float = 1.0, skyContribution: Float = 0.0, reflectionSource: Int = 0): Void;
    public static function environmentSetBackground(env: RID, bg: Int): Void;
    public static function environmentSetBgColor(env: RID, color: Color): Void;
    public static function environmentSetBgEnergy(env: RID, multiplier: Float, exposureValue: Float): Void;
    public static function environmentSetCameraId(env: RID, id: Int): Void;
    public static function environmentSetCanvasMaxLayer(env: RID, maxLayer: Int): Void;
    public static function environmentSetFog(env: RID, enable: Bool, lightColor: Color, lightEnergy: Float, sunScatter: Float, density: Float, height: Float, heightDensity: Float, aerialPerspective: Float, skyAffect: Float, fogMode: Int = 0): Void;
    public static function environmentSetGlow(env: RID, enable: Bool, levels: PackedFloat32Array, intensity: Float, strength: Float, mix: Float, bloomThreshold: Float, blendMode: Int, hdrBleedThreshold: Float, hdrBleedScale: Float, hdrLuminanceCap: Float, glowMapStrength: Float, glowMap: RID): Void;
    public static function environmentSetSdfgi(env: RID, enable: Bool, cascades: Int, minCellSize: Float, yScale: Int, useOcclusion: Bool, bounceFeedback: Float, readSky: Bool, energy: Float, normalBias: Float, probeBias: Float): Void;
    public static function environmentSetSdfgiFramesToConverge(frames: Int): Void;
    public static function environmentSetSdfgiFramesToUpdateLight(frames: Int): Void;
    public static function environmentSetSdfgiRayCount(rayCount: Int): Void;
    public static function environmentSetSky(env: RID, sky: RID): Void;
    public static function environmentSetSkyCustomFov(env: RID, scale: Float): Void;
    public static function environmentSetSkyOrientation(env: RID, orientation: GdBasis): Void;
    public static function environmentSetSsao(env: RID, enable: Bool, radius: Float, intensity: Float, power: Float, detail: Float, horizon: Float, sharpness: Float, lightAffect: Float, aoChannelAffect: Float): Void;
    public static function environmentSetSsaoQuality(quality: Int, halfSize: Bool, adaptiveTarget: Float, blurPasses: Int, fadeoutFrom: Float, fadeoutTo: Float): Void;
    public static function environmentSetSsilQuality(quality: Int, halfSize: Bool, adaptiveTarget: Float, blurPasses: Int, fadeoutFrom: Float, fadeoutTo: Float): Void;
    public static function environmentSetSsr(env: RID, enable: Bool, maxSteps: Int, fadeIn: Float, fadeOut: Float, depthTolerance: Float): Void;
    public static function environmentSetSsrRoughnessQuality(quality: Int): Void;
    public static function environmentSetTonemap(env: RID, toneMapper: Int, exposure: Float, white: Float): Void;
    public static function environmentSetVolumetricFog(env: RID, enable: Bool, density: Float, albedo: Color, emission: Color, emissionEnergy: Float, anisotropy: Float, length: Float, pDetailSpread: Float, giInject: Float, temporalReprojection: Bool, temporalReprojectionAmount: Float, ambientInject: Float, skyAffect: Float): Void;
    public static function environmentSetVolumetricFogFilterActive(active: Bool): Void;
    public static function environmentSetVolumetricFogVolumeSize(size: Int, depth: Int): Void;
    public static function fogVolumeCreate(): RID;
    public static function fogVolumeSetMaterial(fogVolume: RID, material: RID): Void;
    public static function fogVolumeSetShape(fogVolume: RID, shape: Int): Void;
    public static function fogVolumeSetSize(fogVolume: RID, size: GdVector3): Void;
    public static function forceDraw(swapBuffers: Bool = true, frameStep: Float = 0.0): Void;
    public static function forceSync(): Void;
    public static function freeRid(rid: RID): Void;
    public static function getCurrentRenderingDriverName(): String;
    public static function getCurrentRenderingMethod(): String;
    public static function getDefaultClearColor(): Color;
    public static function getFrameSetupTimeCpu(): Float;
    public static function getRenderingDevice(): RenderingDevice;
    public static function getRenderingInfo(info: Int): Int;
    public static function getShaderParameterList(shader: RID): Dynamic;
    public static function getTestCube(): RID;
    public static function getTestTexture(): RID;
    public static function getVideoAdapterApiVersion(): String;
    public static function getVideoAdapterName(): String;
    public static function getVideoAdapterType(): Int;
    public static function getVideoAdapterVendor(): String;
    public static function getWhiteTexture(): RID;
    public static function giSetUseHalfResolution(halfResolution: Bool): Void;
    public static function globalShaderParameterAdd(name: StringName, type: Int, defaultValue: Variant): Void;
    public static function globalShaderParameterGet(name: StringName): Variant;
    public static function globalShaderParameterGetList(): Dynamic;
    public static function globalShaderParameterGetType(name: StringName): Int;
    public static function globalShaderParameterRemove(name: StringName): Void;
    public static function globalShaderParameterSet(name: StringName, value: Variant): Void;
    public static function globalShaderParameterSetOverride(name: StringName, value: Variant): Void;
    public static function hasChanged(): Bool;
    public static function hasFeature(feature: Int): Bool;
    public static function hasOsFeature(feature: String): Bool;
    public static function instanceAttachObjectInstanceId(instance: RID, id: Int): Void;
    public static function instanceAttachSkeleton(instance: RID, skeleton: RID): Void;
    public static function instanceCreate(): RID;
    public static function instanceCreate2(base: RID, scenario: RID): RID;
    public static function instanceGeometryGetShaderParameter(instance: RID, parameter: StringName): Variant;
    public static function instanceGeometryGetShaderParameterDefaultValue(instance: RID, parameter: StringName): Variant;
    public static function instanceGeometryGetShaderParameterList(instance: RID): Dynamic;
    public static function instanceGeometrySetCastShadowsSetting(instance: RID, shadowCastingSetting: Int): Void;
    public static function instanceGeometrySetFlag(instance: RID, flag: Int, enabled: Bool): Void;
    public static function instanceGeometrySetLightmap(instance: RID, lightmap: RID, lightmapUvScale: Rect2, lightmapSlice: Int): Void;
    public static function instanceGeometrySetLodBias(instance: RID, lodBias: Float): Void;
    public static function instanceGeometrySetMaterialOverlay(instance: RID, material: RID): Void;
    public static function instanceGeometrySetMaterialOverride(instance: RID, material: RID): Void;
    public static function instanceGeometrySetShaderParameter(instance: RID, parameter: StringName, value: Variant): Void;
    public static function instanceGeometrySetTransparency(instance: RID, transparency: Float): Void;
    public static function instanceGeometrySetVisibilityRange(instance: RID, min: Float, max: Float, minMargin: Float, maxMargin: Float, fadeMode: Int): Void;
    public static function instanceResetPhysicsInterpolation(instance: RID): Void;
    public static function instanceSetBase(instance: RID, base: RID): Void;
    public static function instanceSetBlendShapeWeight(instance: RID, shape: Int, weight: Float): Void;
    public static function instanceSetCustomAabb(instance: RID, aabb: AABB): Void;
    public static function instanceSetExtraVisibilityMargin(instance: RID, margin: Float): Void;
    public static function instanceSetIgnoreCulling(instance: RID, enabled: Bool): Void;
    public static function instanceSetInterpolated(instance: RID, interpolated: Bool): Void;
    public static function instanceSetLayerMask(instance: RID, mask: Int): Void;
    public static function instanceSetPivotData(instance: RID, sortingOffset: Float, useAabbCenter: Bool): Void;
    public static function instanceSetScenario(instance: RID, scenario: RID): Void;
    public static function instanceSetSurfaceOverrideMaterial(instance: RID, surface: Int, material: RID): Void;
    public static function instanceSetTransform(instance: RID, transform: Transform3D): Void;
    public static function instanceSetVisibilityParent(instance: RID, parent: RID): Void;
    public static function instanceSetVisible(instance: RID, visible: Bool): Void;
    public static function instancesCullAabb(aabb: AABB, ?scenario: RID): PackedInt64Array;
    public static function instancesCullConvex(convex: Dynamic, ?scenario: RID): PackedInt64Array;
    public static function instancesCullRay(from: GdVector3, to: GdVector3, ?scenario: RID): PackedInt64Array;
    public static function isOnRenderThread(): Bool;
    public static function lightDirectionalSetBlendSplits(light: RID, enable: Bool): Void;
    public static function lightDirectionalSetShadowMode(light: RID, mode: Int): Void;
    public static function lightDirectionalSetSkyMode(light: RID, mode: Int): Void;
    public static function lightOmniSetShadowMode(light: RID, mode: Int): Void;
    public static function lightProjectorsSetFilter(filter: Int): Void;
    public static function lightSetBakeMode(light: RID, bakeMode: Int): Void;
    public static function lightSetColor(light: RID, color: Color): Void;
    public static function lightSetCullMask(light: RID, mask: Int): Void;
    public static function lightSetDistanceFade(decal: RID, enabled: Bool, begin: Float, shadow: Float, length: Float): Void;
    public static function lightSetMaxSdfgiCascade(light: RID, cascade: Int): Void;
    public static function lightSetNegative(light: RID, enable: Bool): Void;
    public static function lightSetParam(light: RID, param: Int, value: Float): Void;
    public static function lightSetProjector(light: RID, texture: RID): Void;
    public static function lightSetReverseCullFaceMode(light: RID, enabled: Bool): Void;
    public static function lightSetShadow(light: RID, enabled: Bool): Void;
    public static function lightSetShadowCasterMask(light: RID, mask: Int): Void;
    public static function lightmapCreate(): RID;
    public static function lightmapGetProbeCaptureBspTree(lightmap: RID): PackedInt32Array;
    public static function lightmapGetProbeCapturePoints(lightmap: RID): PackedVector3Array;
    public static function lightmapGetProbeCaptureSh(lightmap: RID): PackedColorArray;
    public static function lightmapGetProbeCaptureTetrahedra(lightmap: RID): PackedInt32Array;
    public static function lightmapSetBakedExposureNormalization(lightmap: RID, bakedExposure: Float): Void;
    public static function lightmapSetProbeBounds(lightmap: RID, bounds: AABB): Void;
    public static function lightmapSetProbeCaptureData(lightmap: RID, points: PackedVector3Array, pointSh: PackedColorArray, tetrahedra: PackedInt32Array, bspTree: PackedInt32Array): Void;
    public static function lightmapSetProbeCaptureUpdateSpeed(speed: Float): Void;
    public static function lightmapSetProbeInterior(lightmap: RID, interior: Bool): Void;
    public static function lightmapSetTextures(lightmap: RID, light: RID, usesSh: Bool): Void;
    public static function lightmapsSetBicubicFilter(enable: Bool): Void;
    public static function makeSphereMesh(latitudes: Int, longitudes: Int, radius: Float): RID;
    public static function materialCreate(): RID;
    public static function materialGetParam(material: RID, parameter: StringName): Variant;
    public static function materialSetNextPass(material: RID, nextMaterial: RID): Void;
    public static function materialSetParam(material: RID, parameter: StringName, value: Variant): Void;
    public static function materialSetRenderPriority(material: RID, priority: Int): Void;
    public static function materialSetShader(shaderMaterial: RID, shader: RID): Void;
    public static function meshAddSurface(mesh: RID, surface: Map<Dynamic, Dynamic>): Void;
    public static function meshAddSurfaceFromArrays(mesh: RID, primitive: Int, arrays: Array<Dynamic>, ?blendShapes: Array<Dynamic>, ?lods: Map<Dynamic, Dynamic>, compressFormat: Int = 0): Void;
    public static function meshClear(mesh: RID): Void;
    public static function meshCreate(): RID;
    public static function meshCreateFromSurfaces(surfaces: Dynamic, blendShapeCount: Int = 0): RID;
    public static function meshGetBlendShapeCount(mesh: RID): Int;
    public static function meshGetBlendShapeMode(mesh: RID): Int;
    public static function meshGetCustomAabb(mesh: RID): AABB;
    public static function meshGetSurface(mesh: RID, surface: Int): Map<Dynamic, Dynamic>;
    public static function meshGetSurfaceCount(mesh: RID): Int;
    public static function meshSetBlendShapeMode(mesh: RID, mode: Int): Void;
    public static function meshSetCustomAabb(mesh: RID, aabb: AABB): Void;
    public static function meshSetShadowMesh(mesh: RID, shadowMesh: RID): Void;
    public static function meshSurfaceGetArrays(mesh: RID, surface: Int): Array<Dynamic>;
    public static function meshSurfaceGetBlendShapeArrays(mesh: RID, surface: Int): Dynamic;
    public static function meshSurfaceGetFormatAttributeStride(format: Int, vertexCount: Int): Int;
    public static function meshSurfaceGetFormatNormalTangentStride(format: Int, vertexCount: Int): Int;
    public static function meshSurfaceGetFormatOffset(format: Int, vertexCount: Int, arrayIndex: Int): Int;
    public static function meshSurfaceGetFormatSkinStride(format: Int, vertexCount: Int): Int;
    public static function meshSurfaceGetFormatVertexStride(format: Int, vertexCount: Int): Int;
    public static function meshSurfaceGetMaterial(mesh: RID, surface: Int): RID;
    public static function meshSurfaceRemove(mesh: RID, surface: Int): Void;
    public static function meshSurfaceSetMaterial(mesh: RID, surface: Int, material: RID): Void;
    public static function meshSurfaceUpdateAttributeRegion(mesh: RID, surface: Int, offset: Int, data: PackedByteArray): Void;
    public static function meshSurfaceUpdateSkinRegion(mesh: RID, surface: Int, offset: Int, data: PackedByteArray): Void;
    public static function meshSurfaceUpdateVertexRegion(mesh: RID, surface: Int, offset: Int, data: PackedByteArray): Void;
    public static function multimeshAllocateData(multimesh: RID, instances: Int, transformFormat: Int, colorFormat: Bool = false, customDataFormat: Bool = false, useIndirect: Bool = false): Void;
    public static function multimeshCreate(): RID;
    public static function multimeshGetAabb(multimesh: RID): AABB;
    public static function multimeshGetBuffer(multimesh: RID): PackedFloat32Array;
    public static function multimeshGetBufferRdRid(multimesh: RID): RID;
    public static function multimeshGetCommandBufferRdRid(multimesh: RID): RID;
    public static function multimeshGetCustomAabb(multimesh: RID): AABB;
    public static function multimeshGetInstanceCount(multimesh: RID): Int;
    public static function multimeshGetMesh(multimesh: RID): RID;
    public static function multimeshGetVisibleInstances(multimesh: RID): Int;
    public static function multimeshInstanceGetColor(multimesh: RID, index: Int): Color;
    public static function multimeshInstanceGetCustomData(multimesh: RID, index: Int): Color;
    public static function multimeshInstanceGetTransform(multimesh: RID, index: Int): Transform3D;
    public static function multimeshInstanceGetTransform2d(multimesh: RID, index: Int): Transform2D;
    public static function multimeshInstanceResetPhysicsInterpolation(multimesh: RID, index: Int): Void;
    public static function multimeshInstanceSetColor(multimesh: RID, index: Int, color: Color): Void;
    public static function multimeshInstanceSetCustomData(multimesh: RID, index: Int, customData: Color): Void;
    public static function multimeshInstanceSetTransform(multimesh: RID, index: Int, transform: Transform3D): Void;
    public static function multimeshInstanceSetTransform2d(multimesh: RID, index: Int, transform: Transform2D): Void;
    public static function multimeshSetBuffer(multimesh: RID, buffer: PackedFloat32Array): Void;
    public static function multimeshSetBufferInterpolated(multimesh: RID, buffer: PackedFloat32Array, bufferPrevious: PackedFloat32Array): Void;
    public static function multimeshSetCustomAabb(multimesh: RID, aabb: AABB): Void;
    public static function multimeshSetMesh(multimesh: RID, mesh: RID): Void;
    public static function multimeshSetPhysicsInterpolated(multimesh: RID, interpolated: Bool): Void;
    public static function multimeshSetPhysicsInterpolationQuality(multimesh: RID, quality: Int): Void;
    public static function multimeshSetVisibleInstances(multimesh: RID, visible: Int): Void;
    public static function occluderCreate(): RID;
    public static function occluderSetMesh(occluder: RID, vertices: PackedVector3Array, indices: PackedInt32Array): Void;
    public static function omniLightCreate(): RID;
    public static function particlesCollisionCreate(): RID;
    public static function particlesCollisionHeightFieldUpdate(particlesCollision: RID): Void;
    public static function particlesCollisionSetAttractorAttenuation(particlesCollision: RID, curve: Float): Void;
    public static function particlesCollisionSetAttractorDirectionality(particlesCollision: RID, amount: Float): Void;
    public static function particlesCollisionSetAttractorStrength(particlesCollision: RID, strength: Float): Void;
    public static function particlesCollisionSetBoxExtents(particlesCollision: RID, extents: GdVector3): Void;
    public static function particlesCollisionSetCollisionType(particlesCollision: RID, type: Int): Void;
    public static function particlesCollisionSetCullMask(particlesCollision: RID, mask: Int): Void;
    public static function particlesCollisionSetFieldTexture(particlesCollision: RID, texture: RID): Void;
    public static function particlesCollisionSetHeightFieldMask(particlesCollision: RID, mask: Int): Void;
    public static function particlesCollisionSetHeightFieldResolution(particlesCollision: RID, resolution: Int): Void;
    public static function particlesCollisionSetSphereRadius(particlesCollision: RID, radius: Float): Void;
    public static function particlesCreate(): RID;
    public static function particlesEmit(particles: RID, transform: Transform3D, velocity: GdVector3, color: Color, custom: Color, emitFlags: Int): Void;
    public static function particlesGetCurrentAabb(particles: RID): AABB;
    public static function particlesGetEmitting(particles: RID): Bool;
    public static function particlesIsInactive(particles: RID): Bool;
    public static function particlesRequestProcess(particles: RID): Void;
    public static function particlesRequestProcessTime(particles: RID, time: Float): Void;
    public static function particlesRestart(particles: RID): Void;
    public static function particlesSetAmount(particles: RID, amount: Int): Void;
    public static function particlesSetAmountRatio(particles: RID, ratio: Float): Void;
    public static function particlesSetCollisionBaseSize(particles: RID, size: Float): Void;
    public static function particlesSetCustomAabb(particles: RID, aabb: AABB): Void;
    public static function particlesSetDrawOrder(particles: RID, order: Int): Void;
    public static function particlesSetDrawPassMesh(particles: RID, pass: Int, mesh: RID): Void;
    public static function particlesSetDrawPasses(particles: RID, count: Int): Void;
    public static function particlesSetEmissionTransform(particles: RID, transform: Transform3D): Void;
    public static function particlesSetEmitterVelocity(particles: RID, velocity: GdVector3): Void;
    public static function particlesSetEmitting(particles: RID, emitting: Bool): Void;
    public static function particlesSetExplosivenessRatio(particles: RID, ratio: Float): Void;
    public static function particlesSetFixedFps(particles: RID, fps: Int): Void;
    public static function particlesSetFractionalDelta(particles: RID, enable: Bool): Void;
    public static function particlesSetInterpToEnd(particles: RID, factor: Float): Void;
    public static function particlesSetInterpolate(particles: RID, enable: Bool): Void;
    public static function particlesSetLifetime(particles: RID, lifetime: Float): Void;
    public static function particlesSetMode(particles: RID, mode: Int): Void;
    public static function particlesSetOneShot(particles: RID, oneShot: Bool): Void;
    public static function particlesSetPreProcessTime(particles: RID, time: Float): Void;
    public static function particlesSetProcessMaterial(particles: RID, material: RID): Void;
    public static function particlesSetRandomnessRatio(particles: RID, ratio: Float): Void;
    public static function particlesSetSpeedScale(particles: RID, scale: Float): Void;
    public static function particlesSetSubemitter(particles: RID, subemitterParticles: RID): Void;
    public static function particlesSetTrailBindPoses(particles: RID, bindPoses: Dynamic): Void;
    public static function particlesSetTrails(particles: RID, enable: Bool, lengthSec: Float): Void;
    public static function particlesSetTransformAlign(particles: RID, align: Int): Void;
    public static function particlesSetUseLocalCoordinates(particles: RID, enable: Bool): Void;
    public static function positionalSoftShadowFilterSetQuality(quality: Int): Void;
    public static function reflectionProbeCreate(): RID;
    public static function reflectionProbeSetAmbientColor(probe: RID, color: Color): Void;
    public static function reflectionProbeSetAmbientEnergy(probe: RID, energy: Float): Void;
    public static function reflectionProbeSetAmbientMode(probe: RID, mode: Int): Void;
    public static function reflectionProbeSetAsInterior(probe: RID, enable: Bool): Void;
    public static function reflectionProbeSetBlendDistance(probe: RID, blendDistance: Float): Void;
    public static function reflectionProbeSetCullMask(probe: RID, layers: Int): Void;
    public static function reflectionProbeSetEnableBoxProjection(probe: RID, enable: Bool): Void;
    public static function reflectionProbeSetEnableShadows(probe: RID, enable: Bool): Void;
    public static function reflectionProbeSetIntensity(probe: RID, intensity: Float): Void;
    public static function reflectionProbeSetMaxDistance(probe: RID, distance: Float): Void;
    public static function reflectionProbeSetMeshLodThreshold(probe: RID, pixels: Float): Void;
    public static function reflectionProbeSetOriginOffset(probe: RID, offset: GdVector3): Void;
    public static function reflectionProbeSetReflectionMask(probe: RID, layers: Int): Void;
    public static function reflectionProbeSetResolution(probe: RID, resolution: Int): Void;
    public static function reflectionProbeSetSize(probe: RID, size: GdVector3): Void;
    public static function reflectionProbeSetUpdateMode(probe: RID, mode: Int): Void;
    public static function requestFrameDrawnCallback(callable: Callable): Void;
    public static function scenarioCreate(): RID;
    public static function scenarioSetCameraAttributes(scenario: RID, effects: RID): Void;
    public static function scenarioSetCompositor(scenario: RID, compositor: RID): Void;
    public static function scenarioSetEnvironment(scenario: RID, environment: RID): Void;
    public static function scenarioSetFallbackEnvironment(scenario: RID, environment: RID): Void;
    public static function screenSpaceRoughnessLimiterSetActive(enable: Bool, amount: Float, limit: Float): Void;
    public static function setBootImage(image: Image, color: Color, scale: Bool, useFilter: Bool = true): Void;
    public static function setDebugGenerateWireframes(generate: Bool): Void;
    public static function setDefaultClearColor(color: Color): Void;
    public static function shaderCreate(): RID;
    public static function shaderGetCode(shader: RID): String;
    public static function shaderGetDefaultTextureParameter(shader: RID, name: StringName, index: Int = 0): RID;
    public static function shaderGetParameterDefault(shader: RID, name: StringName): Variant;
    public static function shaderSetCode(shader: RID, code: String): Void;
    public static function shaderSetDefaultTextureParameter(shader: RID, name: StringName, texture: RID, index: Int = 0): Void;
    public static function shaderSetPathHint(shader: RID, path: String): Void;
    public static function skeletonAllocateData(skeleton: RID, bones: Int, is2dSkeleton: Bool = false): Void;
    public static function skeletonBoneGetTransform(skeleton: RID, bone: Int): Transform3D;
    public static function skeletonBoneGetTransform2d(skeleton: RID, bone: Int): Transform2D;
    public static function skeletonBoneSetTransform(skeleton: RID, bone: Int, transform: Transform3D): Void;
    public static function skeletonBoneSetTransform2d(skeleton: RID, bone: Int, transform: Transform2D): Void;
    public static function skeletonCreate(): RID;
    public static function skeletonGetBoneCount(skeleton: RID): Int;
    public static function skeletonSetBaseTransform2d(skeleton: RID, baseTransform: Transform2D): Void;
    public static function skyBakePanorama(sky: RID, energy: Float, bakeIrradiance: Bool, size: GdVector2i): Image;
    public static function skyCreate(): RID;
    public static function skySetMaterial(sky: RID, material: RID): Void;
    public static function skySetMode(sky: RID, mode: Int): Void;
    public static function skySetRadianceSize(sky: RID, radianceSize: Int): Void;
    public static function spotLightCreate(): RID;
    public static function subSurfaceScatteringSetQuality(quality: Int): Void;
    public static function subSurfaceScatteringSetScale(scale: Float, depthScale: Float): Void;
    public static function texture2dCreate(image: Image): RID;
    public static function texture2dGet(texture: RID): Image;
    public static function texture2dLayerGet(texture: RID, layer: Int): Image;
    public static function texture2dLayeredCreate(layers: Dynamic, layeredType: Int): RID;
    public static function texture2dLayeredPlaceholderCreate(layeredType: Int): RID;
    public static function texture2dPlaceholderCreate(): RID;
    public static function texture2dUpdate(texture: RID, image: Image, layer: Int): Void;
    public static function texture3dCreate(format: Int, width: Int, height: Int, depth: Int, mipmaps: Bool, data: Dynamic): RID;
    public static function texture3dGet(texture: RID): Dynamic;
    public static function texture3dPlaceholderCreate(): RID;
    public static function texture3dUpdate(texture: RID, data: Dynamic): Void;
    public static function textureCreateFromNativeHandle(type: Int, format: Int, nativeHandle: Int, width: Int, height: Int, depth: Int, layers: Int = 1, layeredType: Int = 0): RID;
    public static function textureGetFormat(texture: RID): Int;
    public static function textureGetNativeHandle(texture: RID, srgb: Bool = false): Int;
    public static function textureGetPath(texture: RID): String;
    public static function textureGetRdTexture(texture: RID, srgb: Bool = false): RID;
    public static function textureProxyCreate(base: RID): RID;
    public static function textureProxyUpdate(texture: RID, proxyTo: RID): Void;
    public static function textureRdCreate(rdTexture: RID, layerType: Int = 0): RID;
    public static function textureReplace(texture: RID, byTexture: RID): Void;
    public static function textureSetForceRedrawIfVisible(texture: RID, enable: Bool): Void;
    public static function textureSetPath(texture: RID, path: String): Void;
    public static function textureSetSizeOverride(texture: RID, width: Int, height: Int): Void;
    public static function viewportAttachCamera(viewport: RID, camera: RID): Void;
    public static function viewportAttachCanvas(viewport: RID, canvas: RID): Void;
    public static function viewportAttachToScreen(viewport: RID, ?rect: Rect2, screen: Int = 0): Void;
    public static function viewportCreate(): RID;
    public static function viewportGetMeasuredRenderTimeCpu(viewport: RID): Float;
    public static function viewportGetMeasuredRenderTimeGpu(viewport: RID): Float;
    public static function viewportGetRenderInfo(viewport: RID, type: Int, info: Int): Int;
    public static function viewportGetRenderTarget(viewport: RID): RID;
    public static function viewportGetTexture(viewport: RID): RID;
    public static function viewportGetUpdateMode(viewport: RID): Int;
    public static function viewportRemoveCanvas(viewport: RID, canvas: RID): Void;
    public static function viewportSetActive(viewport: RID, active: Bool): Void;
    public static function viewportSetAnisotropicFilteringLevel(viewport: RID, anisotropicFilteringLevel: Int): Void;
    public static function viewportSetCanvasCullMask(viewport: RID, canvasCullMask: Int): Void;
    public static function viewportSetCanvasStacking(viewport: RID, canvas: RID, layer: Int, sublayer: Int): Void;
    public static function viewportSetCanvasTransform(viewport: RID, canvas: RID, offset: Transform2D): Void;
    public static function viewportSetClearMode(viewport: RID, clearMode: Int): Void;
    public static function viewportSetDebugDraw(viewport: RID, draw: Int): Void;
    public static function viewportSetDefaultCanvasItemTextureFilter(viewport: RID, filter: Int): Void;
    public static function viewportSetDefaultCanvasItemTextureRepeat(viewport: RID, repeat: Int): Void;
    public static function viewportSetDisable2d(viewport: RID, disable: Bool): Void;
    public static function viewportSetDisable3d(viewport: RID, disable: Bool): Void;
    public static function viewportSetEnvironmentMode(viewport: RID, mode: Int): Void;
    public static function viewportSetFsrSharpness(viewport: RID, sharpness: Float): Void;
    public static function viewportSetGlobalCanvasTransform(viewport: RID, transform: Transform2D): Void;
    public static function viewportSetMeasureRenderTime(viewport: RID, enable: Bool): Void;
    public static function viewportSetMsaa2d(viewport: RID, msaa: Int): Void;
    public static function viewportSetMsaa3d(viewport: RID, msaa: Int): Void;
    public static function viewportSetOcclusionCullingBuildQuality(quality: Int): Void;
    public static function viewportSetOcclusionRaysPerThread(raysPerThread: Int): Void;
    public static function viewportSetParentViewport(viewport: RID, parentViewport: RID): Void;
    public static function viewportSetPositionalShadowAtlasQuadrantSubdivision(viewport: RID, quadrant: Int, subdivision: Int): Void;
    public static function viewportSetPositionalShadowAtlasSize(viewport: RID, size: Int, use16Bits: Bool = false): Void;
    public static function viewportSetRenderDirectToScreen(viewport: RID, enabled: Bool): Void;
    public static function viewportSetScaling3dMode(viewport: RID, scaling3dMode: Int): Void;
    public static function viewportSetScaling3dScale(viewport: RID, scale: Float): Void;
    public static function viewportSetScenario(viewport: RID, scenario: RID): Void;
    public static function viewportSetScreenSpaceAa(viewport: RID, mode: Int): Void;
    public static function viewportSetSdfOversizeAndScale(viewport: RID, oversize: Int, scale: Int): Void;
    public static function viewportSetSize(viewport: RID, width: Int, height: Int): Void;
    public static function viewportSetSnap2dTransformsToPixel(viewport: RID, enabled: Bool): Void;
    public static function viewportSetSnap2dVerticesToPixel(viewport: RID, enabled: Bool): Void;
    public static function viewportSetTextureMipmapBias(viewport: RID, mipmapBias: Float): Void;
    public static function viewportSetTransparentBackground(viewport: RID, enabled: Bool): Void;
    public static function viewportSetUpdateMode(viewport: RID, updateMode: Int): Void;
    public static function viewportSetUseDebanding(viewport: RID, enable: Bool): Void;
    public static function viewportSetUseHdr2d(viewport: RID, enabled: Bool): Void;
    public static function viewportSetUseOcclusionCulling(viewport: RID, enable: Bool): Void;
    public static function viewportSetUseTaa(viewport: RID, enable: Bool): Void;
    public static function viewportSetUseXr(viewport: RID, useXr: Bool): Void;
    public static function viewportSetVrsMode(viewport: RID, mode: Int): Void;
    public static function viewportSetVrsTexture(viewport: RID, texture: RID): Void;
    public static function viewportSetVrsUpdateMode(viewport: RID, mode: Int): Void;
    public static function visibilityNotifierCreate(): RID;
    public static function visibilityNotifierSetAabb(notifier: RID, aabb: AABB): Void;
    public static function visibilityNotifierSetCallbacks(notifier: RID, enterCallable: Callable, exitCallable: Callable): Void;
    public static function voxelGiAllocateData(voxelGi: RID, toCellXform: Transform3D, aabb: AABB, octreeSize: GdVector3i, octreeCells: PackedByteArray, dataCells: PackedByteArray, distanceField: PackedByteArray, levelCounts: PackedInt32Array): Void;
    public static function voxelGiCreate(): RID;
    public static function voxelGiGetDataCells(voxelGi: RID): PackedByteArray;
    public static function voxelGiGetDistanceField(voxelGi: RID): PackedByteArray;
    public static function voxelGiGetLevelCounts(voxelGi: RID): PackedInt32Array;
    public static function voxelGiGetOctreeCells(voxelGi: RID): PackedByteArray;
    public static function voxelGiGetOctreeSize(voxelGi: RID): Vector3i;
    public static function voxelGiGetToCellXform(voxelGi: RID): Transform3D;
    public static function voxelGiSetBakedExposureNormalization(voxelGi: RID, bakedExposure: Float): Void;
    public static function voxelGiSetBias(voxelGi: RID, bias: Float): Void;
    public static function voxelGiSetDynamicRange(voxelGi: RID, range: Float): Void;
    public static function voxelGiSetEnergy(voxelGi: RID, energy: Float): Void;
    public static function voxelGiSetInterior(voxelGi: RID, enable: Bool): Void;
    public static function voxelGiSetNormalBias(voxelGi: RID, bias: Float): Void;
    public static function voxelGiSetPropagation(voxelGi: RID, amount: Float): Void;
    public static function voxelGiSetQuality(quality: Int): Void;
    public static function voxelGiSetUseTwoBounces(voxelGi: RID, enable: Bool): Void;
    public var framePostDraw: NativeEvent;
    public var framePreDraw: NativeEvent;
}
