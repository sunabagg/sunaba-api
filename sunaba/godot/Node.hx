package sunaba.godot;

import sunaba.core.Event;

@:native("godot.Node")
extern class Node extends Object {
    public var autoTranslateMode: Int;
    public var editorDescription: String;
    public var multiplayer: MultiplayerAPI;
    public var name: StringName;
    public var owner: Node;
    public var physicsInterpolationMode: Int;
    public var processMode: Int;
    public var processPhysicsPriority: Int;
    public var processPriority: Int;
    public var processThreadGroup: Int;
    public var processThreadGroupOrder: Int;
    public var processThreadMessages: Int;
    public var sceneFilePath: String;
    public var uniqueNameInOwner: Bool;
    @:native("__new")
    public function new();
    public function addChild(node: Node, forceReadableName: Bool = false, internal: Int = 0): Void;
    public function addSibling(sibling: Node, forceReadableName: Bool = false): Void;
    public function addToGroup(group: StringName, persistent: Bool = false): Void;
    public function atr(message: String, ?context: StringName): String;
    public function atrN(message: String, pluralMessage: StringName, n: Int, ?context: StringName): String;
    public function callDeferredThreadGroup(method: StringName): Variant;
    public function callThreadSafe(method: StringName): Variant;
    public function canProcess(): Bool;
    public function createTween(): Tween;
    public function duplicate(flags: Int = 15): Node;
    public function findChild(pattern: String, recursive: Bool = true, owned: Bool = true): Node;
    public function findChildren(pattern: String, ?type: String, recursive: Bool = true, owned: Bool = true): Dynamic;
    public function findParent(pattern: String): Node;
    public function getChild(idx: Int, includeInternal: Bool = false): Node;
    public function getChildCount(includeInternal: Bool = false): Int;
    public function getChildren(includeInternal: Bool = false): Dynamic;
    public function getGroups(): Dynamic;
    public function getIndex(includeInternal: Bool = false): Int;
    public function getLastExclusiveWindow(): Window;
    public function getMultiplayerAuthority(): Int;
    public function getNode(path: NodePath): Node;
    public function getNodeAndResource(path: NodePath): Array<Dynamic>;
    public function getNodeOrNull(path: NodePath): Node;
    public function getParent(): Node;
    public function getPath(): NodePath;
    public function getPathTo(node: Node, useUniquePath: Bool = false): NodePath;
    public function getPhysicsProcessDeltaTime(): Float;
    public function getProcessDeltaTime(): Float;
    public function getRpcConfig(): Variant;
    public function getSceneInstanceLoadPlaceholder(): Bool;
    public function getTree(): SceneTree;
    public function getTreeString(): String;
    public function getTreeStringPretty(): String;
    public function getViewport(): Viewport;
    public function getWindow(): Window;
    public function hasNode(path: NodePath): Bool;
    public function hasNodeAndResource(path: NodePath): Bool;
    public function isAncestorOf(node: Node): Bool;
    public function isDisplayedFolded(): Bool;
    public function isEditableInstance(node: Node): Bool;
    public function isGreaterThan(node: Node): Bool;
    public function isInGroup(group: StringName): Bool;
    public function isInsideTree(): Bool;
    public function isMultiplayerAuthority(): Bool;
    public function isNodeReady(): Bool;
    public function isPartOfEditedScene(): Bool;
    public function isPhysicsInterpolated(): Bool;
    public function isPhysicsInterpolatedAndEnabled(): Bool;
    public function isPhysicsProcessing(): Bool;
    public function isPhysicsProcessingInternal(): Bool;
    public function isProcessing(): Bool;
    public function isProcessingInput(): Bool;
    public function isProcessingInternal(): Bool;
    public function isProcessingShortcutInput(): Bool;
    public function isProcessingUnhandledInput(): Bool;
    public function isProcessingUnhandledKeyInput(): Bool;
    public function moveChild(childNode: Node, toIndex: Int): Void;
    public function notifyDeferredThreadGroup(what: Int): Void;
    public function notifyThreadSafe(what: Int): Void;
    public static function printOrphanNodes(): Void;
    public function printTree(): Void;
    public function printTreePretty(): Void;
    public function propagateCall(method: StringName, ?args: Array<Dynamic>, parentFirst: Bool = false): Void;
    public function propagateNotification(what: Int): Void;
    public function queueFree(): Void;
    public function removeChild(node: Node): Void;
    public function removeFromGroup(group: StringName): Void;
    public function reparent(newParent: Node, keepGlobalTransform: Bool = true): Void;
    public function replaceBy(node: Node, keepGroups: Bool = false): Void;
    public function requestReady(): Void;
    public function resetPhysicsInterpolation(): Void;
    public function rpc(method: StringName): Int;
    public function rpcConfig(method: StringName, config: Variant): Void;
    public function rpcId(peerId: Int, method: StringName): Int;
    public function setDeferredThreadGroup(property: StringName, value: Variant): Void;
    public function setDisplayFolded(fold: Bool): Void;
    public function setEditableInstance(node: Node, isEditable: Bool): Void;
    public function setMultiplayerAuthority(id: Int, recursive: Bool = true): Void;
    public function setPhysicsProcess(enable: Bool): Void;
    public function setPhysicsProcessInternal(enable: Bool): Void;
    public function setProcess(enable: Bool): Void;
    public function setProcessInput(enable: Bool): Void;
    public function setProcessInternal(enable: Bool): Void;
    public function setProcessShortcutInput(enable: Bool): Void;
    public function setProcessUnhandledInput(enable: Bool): Void;
    public function setProcessUnhandledKeyInput(enable: Bool): Void;
    public function setSceneInstanceLoadPlaceholder(loadPlaceholder: Bool): Void;
    public function setThreadSafe(property: StringName, value: Variant): Void;
    public function setTranslationDomainInherited(): Void;
    public function updateConfigurationWarnings(): Void;
    public var childEnteredTree: Event;
    public var childExitingTree: Event;
    public var childOrderChanged: Event;
    public var editorDescriptionChanged: Event;
    public var editorStateChanged: Event;
    public var ready: Event;
    public var renamed: Event;
    public var replacingBy: Event;
    public var treeEntered: Event;
    public var treeExited: Event;
    public var treeExiting: Event;
}
