package sunaba.godot;

import sunaba.core.Event;

@:native("godot.Animation")
extern class Animation extends Resource {
    public var captureIncluded: Bool;
    public var length: Float;
    public var loopMode: Int;
    public var step: Float;
    @:native("__new")
    public function new();
    public function addMarker(name: StringName, time: Float): Void;
    public function addTrack(type: Int, atPosition: Int = -1): Int;
    public function animationTrackGetKeyAnimation(trackIdx: Int, keyIdx: Int): StringName;
    public function animationTrackInsertKey(trackIdx: Int, time: Float, animation: StringName): Int;
    public function animationTrackSetKeyAnimation(trackIdx: Int, keyIdx: Int, animation: StringName): Void;
    public function audioTrackGetKeyEndOffset(trackIdx: Int, keyIdx: Int): Float;
    public function audioTrackGetKeyStartOffset(trackIdx: Int, keyIdx: Int): Float;
    public function audioTrackGetKeyStream(trackIdx: Int, keyIdx: Int): Resource;
    public function audioTrackInsertKey(trackIdx: Int, time: Float, stream: Resource, startOffset: Float = 0, endOffset: Float = 0): Int;
    public function audioTrackIsUseBlend(trackIdx: Int): Bool;
    public function audioTrackSetKeyEndOffset(trackIdx: Int, keyIdx: Int, offset: Float): Void;
    public function audioTrackSetKeyStartOffset(trackIdx: Int, keyIdx: Int, offset: Float): Void;
    public function audioTrackSetKeyStream(trackIdx: Int, keyIdx: Int, stream: Resource): Void;
    public function audioTrackSetUseBlend(trackIdx: Int, enable: Bool): Void;
    public function bezierTrackGetKeyInHandle(trackIdx: Int, keyIdx: Int): Vector2;
    public function bezierTrackGetKeyOutHandle(trackIdx: Int, keyIdx: Int): Vector2;
    public function bezierTrackGetKeyValue(trackIdx: Int, keyIdx: Int): Float;
    public function bezierTrackInsertKey(trackIdx: Int, time: Float, value: Float, ?inHandle: GdVector2, ?outHandle: GdVector2): Int;
    public function bezierTrackInterpolate(trackIdx: Int, time: Float): Float;
    public function bezierTrackSetKeyInHandle(trackIdx: Int, keyIdx: Int, inHandle: GdVector2, balancedValueTimeRatio: Float = 1.0): Void;
    public function bezierTrackSetKeyOutHandle(trackIdx: Int, keyIdx: Int, outHandle: GdVector2, balancedValueTimeRatio: Float = 1.0): Void;
    public function bezierTrackSetKeyValue(trackIdx: Int, keyIdx: Int, value: Float): Void;
    public function blendShapeTrackInsertKey(trackIdx: Int, time: Float, amount: Float): Int;
    public function blendShapeTrackInterpolate(trackIdx: Int, timeSec: Float, backward: Bool = false): Float;
    public function clear(): Void;
    public function compress(pageSize: Int = 8192, fps: Int = 120, splitTolerance: Float = 4.0): Void;
    public function copyTrack(trackIdx: Int, toAnimation: Animation): Void;
    public function findTrack(path: NodePath, type: Int): Int;
    public function getMarkerAtTime(time: Float): StringName;
    public function getMarkerColor(name: StringName): Color;
    public function getMarkerNames(): PackedStringArray;
    public function getMarkerTime(name: StringName): Float;
    public function getNextMarker(time: Float): StringName;
    public function getPrevMarker(time: Float): StringName;
    public function getTrackCount(): Int;
    public function hasMarker(name: StringName): Bool;
    public function methodTrackGetName(trackIdx: Int, keyIdx: Int): StringName;
    public function methodTrackGetParams(trackIdx: Int, keyIdx: Int): Array<Dynamic>;
    public function optimize(allowedVelocityErr: Float = 0.01, allowedAngularErr: Float = 0.01, precision: Int = 3): Void;
    public function positionTrackInsertKey(trackIdx: Int, time: Float, position: GdVector3): Int;
    public function positionTrackInterpolate(trackIdx: Int, timeSec: Float, backward: Bool = false): Vector3;
    public function removeMarker(name: StringName): Void;
    public function removeTrack(trackIdx: Int): Void;
    public function rotationTrackInsertKey(trackIdx: Int, time: Float, rotation: GdQuaternion): Int;
    public function rotationTrackInterpolate(trackIdx: Int, timeSec: Float, backward: Bool = false): Quaternion;
    public function scaleTrackInsertKey(trackIdx: Int, time: Float, scale: GdVector3): Int;
    public function scaleTrackInterpolate(trackIdx: Int, timeSec: Float, backward: Bool = false): Vector3;
    public function setMarkerColor(name: StringName, color: Color): Void;
    public function trackFindKey(trackIdx: Int, time: Float, findMode: Int = 0, limit: Bool = false, backward: Bool = false): Int;
    public function trackGetInterpolationLoopWrap(trackIdx: Int): Bool;
    public function trackGetInterpolationType(trackIdx: Int): Int;
    public function trackGetKeyCount(trackIdx: Int): Int;
    public function trackGetKeyTime(trackIdx: Int, keyIdx: Int): Float;
    public function trackGetKeyTransition(trackIdx: Int, keyIdx: Int): Float;
    public function trackGetKeyValue(trackIdx: Int, keyIdx: Int): Variant;
    public function trackGetPath(trackIdx: Int): NodePath;
    public function trackGetType(trackIdx: Int): Int;
    public function trackInsertKey(trackIdx: Int, time: Float, key: Variant, transition: Float = 1): Int;
    public function trackIsCompressed(trackIdx: Int): Bool;
    public function trackIsEnabled(trackIdx: Int): Bool;
    public function trackIsImported(trackIdx: Int): Bool;
    public function trackMoveDown(trackIdx: Int): Void;
    public function trackMoveTo(trackIdx: Int, toIdx: Int): Void;
    public function trackMoveUp(trackIdx: Int): Void;
    public function trackRemoveKey(trackIdx: Int, keyIdx: Int): Void;
    public function trackRemoveKeyAtTime(trackIdx: Int, time: Float): Void;
    public function trackSetEnabled(trackIdx: Int, enabled: Bool): Void;
    public function trackSetImported(trackIdx: Int, imported: Bool): Void;
    public function trackSetInterpolationLoopWrap(trackIdx: Int, interpolation: Bool): Void;
    public function trackSetInterpolationType(trackIdx: Int, interpolation: Int): Void;
    public function trackSetKeyTime(trackIdx: Int, keyIdx: Int, time: Float): Void;
    public function trackSetKeyTransition(trackIdx: Int, keyIdx: Int, transition: Float): Void;
    public function trackSetKeyValue(trackIdx: Int, key: Int, value: Variant): Void;
    public function trackSetPath(trackIdx: Int, path: NodePath): Void;
    public function trackSwap(trackIdx: Int, withIdx: Int): Void;
    public function valueTrackGetUpdateMode(trackIdx: Int): Int;
    public function valueTrackInterpolate(trackIdx: Int, timeSec: Float, backward: Bool = false): Variant;
    public function valueTrackSetUpdateMode(trackIdx: Int, mode: Int): Void;
}
