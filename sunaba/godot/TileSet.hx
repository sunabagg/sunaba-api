package sunaba.godot;

import sunaba.core.NativeEvent;

@:native("godot.TileSet")
extern class TileSet extends Resource {
    public var tileLayout: Int;
    public var tileOffsetAxis: Int;
    public var tileShape: Int;
    public var tileSize: Vector2i;
    public var uvClipping: Bool;
    @:native("__new")
    public function new();
    public function addCustomDataLayer(toPosition: Int = -1): Void;
    public function addNavigationLayer(toPosition: Int = -1): Void;
    public function addOcclusionLayer(toPosition: Int = -1): Void;
    public function addPattern(pattern: TileMapPattern, index: Int = -1): Int;
    public function addPhysicsLayer(toPosition: Int = -1): Void;
    public function addSource(source: TileSetSource, atlasSourceIdOverride: Int = -1): Int;
    public function addTerrain(terrainSet: Int, toPosition: Int = -1): Void;
    public function addTerrainSet(toPosition: Int = -1): Void;
    public function cleanupInvalidTileProxies(): Void;
    public function clearTileProxies(): Void;
    public function getAlternativeLevelTileProxy(sourceFrom: Int, coordsFrom: GdVector2i, alternativeFrom: Int): Array<Dynamic>;
    public function getCoordsLevelTileProxy(sourceFrom: Int, coordsFrom: GdVector2i): Array<Dynamic>;
    public function getCustomDataLayerByName(layerName: String): Int;
    public function getCustomDataLayerName(layerIndex: Int): String;
    public function getCustomDataLayerType(layerIndex: Int): Int;
    public function getCustomDataLayersCount(): Int;
    public function getNavigationLayerLayerValue(layerIndex: Int, layerNumber: Int): Bool;
    public function getNavigationLayerLayers(layerIndex: Int): Int;
    public function getNavigationLayersCount(): Int;
    public function getNextSourceId(): Int;
    public function getOcclusionLayerLightMask(layerIndex: Int): Int;
    public function getOcclusionLayerSdfCollision(layerIndex: Int): Bool;
    public function getOcclusionLayersCount(): Int;
    public function getPattern(index: Int = -1): TileMapPattern;
    public function getPatternsCount(): Int;
    public function getPhysicsLayerCollisionLayer(layerIndex: Int): Int;
    public function getPhysicsLayerCollisionMask(layerIndex: Int): Int;
    public function getPhysicsLayerCollisionPriority(layerIndex: Int): Float;
    public function getPhysicsLayerPhysicsMaterial(layerIndex: Int): PhysicsMaterial;
    public function getPhysicsLayersCount(): Int;
    public function getSource(sourceId: Int): TileSetSource;
    public function getSourceCount(): Int;
    public function getSourceId(index: Int): Int;
    public function getSourceLevelTileProxy(sourceFrom: Int): Int;
    public function getTerrainColor(terrainSet: Int, terrainIndex: Int): Color;
    public function getTerrainName(terrainSet: Int, terrainIndex: Int): String;
    public function getTerrainSetMode(terrainSet: Int): Int;
    public function getTerrainSetsCount(): Int;
    public function getTerrainsCount(terrainSet: Int): Int;
    public function hasAlternativeLevelTileProxy(sourceFrom: Int, coordsFrom: GdVector2i, alternativeFrom: Int): Bool;
    public function hasCoordsLevelTileProxy(sourceFrom: Int, coordsFrom: GdVector2i): Bool;
    public function hasCustomDataLayerByName(layerName: String): Bool;
    public function hasSource(sourceId: Int): Bool;
    public function hasSourceLevelTileProxy(sourceFrom: Int): Bool;
    public function mapTileProxy(sourceFrom: Int, coordsFrom: GdVector2i, alternativeFrom: Int): Array<Dynamic>;
    public function moveCustomDataLayer(layerIndex: Int, toPosition: Int): Void;
    public function moveNavigationLayer(layerIndex: Int, toPosition: Int): Void;
    public function moveOcclusionLayer(layerIndex: Int, toPosition: Int): Void;
    public function movePhysicsLayer(layerIndex: Int, toPosition: Int): Void;
    public function moveTerrain(terrainSet: Int, terrainIndex: Int, toPosition: Int): Void;
    public function moveTerrainSet(terrainSet: Int, toPosition: Int): Void;
    public function removeAlternativeLevelTileProxy(sourceFrom: Int, coordsFrom: GdVector2i, alternativeFrom: Int): Void;
    public function removeCoordsLevelTileProxy(sourceFrom: Int, coordsFrom: GdVector2i): Void;
    public function removeCustomDataLayer(layerIndex: Int): Void;
    public function removeNavigationLayer(layerIndex: Int): Void;
    public function removeOcclusionLayer(layerIndex: Int): Void;
    public function removePattern(index: Int): Void;
    public function removePhysicsLayer(layerIndex: Int): Void;
    public function removeSource(sourceId: Int): Void;
    public function removeSourceLevelTileProxy(sourceFrom: Int): Void;
    public function removeTerrain(terrainSet: Int, terrainIndex: Int): Void;
    public function removeTerrainSet(terrainSet: Int): Void;
    public function setAlternativeLevelTileProxy(sourceFrom: Int, coordsFrom: GdVector2i, alternativeFrom: Int, sourceTo: Int, coordsTo: GdVector2i, alternativeTo: Int): Void;
    public function setCoordsLevelTileProxy(pSourceFrom: Int, coordsFrom: GdVector2i, sourceTo: Int, coordsTo: GdVector2i): Void;
    public function setCustomDataLayerName(layerIndex: Int, layerName: String): Void;
    public function setCustomDataLayerType(layerIndex: Int, layerType: Int): Void;
    public function setNavigationLayerLayerValue(layerIndex: Int, layerNumber: Int, value: Bool): Void;
    public function setNavigationLayerLayers(layerIndex: Int, layers: Int): Void;
    public function setOcclusionLayerLightMask(layerIndex: Int, lightMask: Int): Void;
    public function setOcclusionLayerSdfCollision(layerIndex: Int, sdfCollision: Bool): Void;
    public function setPhysicsLayerCollisionLayer(layerIndex: Int, layer: Int): Void;
    public function setPhysicsLayerCollisionMask(layerIndex: Int, mask: Int): Void;
    public function setPhysicsLayerCollisionPriority(layerIndex: Int, priority: Float): Void;
    public function setPhysicsLayerPhysicsMaterial(layerIndex: Int, physicsMaterial: PhysicsMaterial): Void;
    public function setSourceId(sourceId: Int, newSourceId: Int): Void;
    public function setSourceLevelTileProxy(sourceFrom: Int, sourceTo: Int): Void;
    public function setTerrainColor(terrainSet: Int, terrainIndex: Int, color: Color): Void;
    public function setTerrainName(terrainSet: Int, terrainIndex: Int, name: String): Void;
    public function setTerrainSetMode(terrainSet: Int, mode: Int): Void;
}
