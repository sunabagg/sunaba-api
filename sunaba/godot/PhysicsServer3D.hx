package sunaba.godot;

import sunaba.core.NativeEvent;

@:native("godot.PhysicsServer3D")
extern class PhysicsServer3D extends Object {
    @:native("__new")
    public function new();
    public function areaAddShape(area: RID, shape: RID, transform: Transform3D, disabled: Bool = false): Void;
    public function areaAttachObjectInstanceId(area: RID, id: Int): Void;
    public function areaClearShapes(area: RID): Void;
    public function areaCreate(): RID;
    public function areaGetCollisionLayer(area: RID): Int;
    public function areaGetCollisionMask(area: RID): Int;
    public function areaGetObjectInstanceId(area: RID): Int;
    public function areaGetParam(area: RID, param: Int): Variant;
    public function areaGetShape(area: RID, shapeIdx: Int): RID;
    public function areaGetShapeCount(area: RID): Int;
    public function areaGetShapeTransform(area: RID, shapeIdx: Int): Transform3D;
    public function areaGetSpace(area: RID): RID;
    public function areaGetTransform(area: RID): Transform3D;
    public function areaRemoveShape(area: RID, shapeIdx: Int): Void;
    public function areaSetAreaMonitorCallback(area: RID, callback: Callable): Void;
    public function areaSetCollisionLayer(area: RID, layer: Int): Void;
    public function areaSetCollisionMask(area: RID, mask: Int): Void;
    public function areaSetMonitorCallback(area: RID, callback: Callable): Void;
    public function areaSetMonitorable(area: RID, monitorable: Bool): Void;
    public function areaSetParam(area: RID, param: Int, value: Variant): Void;
    public function areaSetRayPickable(area: RID, enable: Bool): Void;
    public function areaSetShape(area: RID, shapeIdx: Int, shape: RID): Void;
    public function areaSetShapeDisabled(area: RID, shapeIdx: Int, disabled: Bool): Void;
    public function areaSetShapeTransform(area: RID, shapeIdx: Int, transform: Transform3D): Void;
    public function areaSetSpace(area: RID, space: RID): Void;
    public function areaSetTransform(area: RID, transform: Transform3D): Void;
    public function bodyAddCollisionException(body: RID, exceptedBody: RID): Void;
    public function bodyAddConstantCentralForce(body: RID, force: GdVector3): Void;
    public function bodyAddConstantForce(body: RID, force: GdVector3, position: GdVector3): Void;
    public function bodyAddConstantTorque(body: RID, torque: GdVector3): Void;
    public function bodyAddShape(body: RID, shape: RID, transform: Transform3D, disabled: Bool = false): Void;
    public function bodyApplyCentralForce(body: RID, force: GdVector3): Void;
    public function bodyApplyCentralImpulse(body: RID, impulse: GdVector3): Void;
    public function bodyApplyForce(body: RID, force: GdVector3, position: GdVector3): Void;
    public function bodyApplyImpulse(body: RID, impulse: GdVector3, position: GdVector3): Void;
    public function bodyApplyTorque(body: RID, torque: GdVector3): Void;
    public function bodyApplyTorqueImpulse(body: RID, impulse: GdVector3): Void;
    public function bodyAttachObjectInstanceId(body: RID, id: Int): Void;
    public function bodyClearShapes(body: RID): Void;
    public function bodyCreate(): RID;
    public function bodyGetCollisionLayer(body: RID): Int;
    public function bodyGetCollisionMask(body: RID): Int;
    public function bodyGetCollisionPriority(body: RID): Float;
    public function bodyGetConstantForce(body: RID): Vector3;
    public function bodyGetConstantTorque(body: RID): Vector3;
    public function bodyGetDirectState(body: RID): PhysicsDirectBodyState3D;
    public function bodyGetMaxContactsReported(body: RID): Int;
    public function bodyGetMode(body: RID): Int;
    public function bodyGetObjectInstanceId(body: RID): Int;
    public function bodyGetParam(body: RID, param: Int): Variant;
    public function bodyGetShape(body: RID, shapeIdx: Int): RID;
    public function bodyGetShapeCount(body: RID): Int;
    public function bodyGetShapeTransform(body: RID, shapeIdx: Int): Transform3D;
    public function bodyGetSpace(body: RID): RID;
    public function bodyGetState(body: RID, state: Int): Variant;
    public function bodyIsAxisLocked(body: RID, axis: Int): Bool;
    public function bodyIsContinuousCollisionDetectionEnabled(body: RID): Bool;
    public function bodyIsOmittingForceIntegration(body: RID): Bool;
    public function bodyRemoveCollisionException(body: RID, exceptedBody: RID): Void;
    public function bodyRemoveShape(body: RID, shapeIdx: Int): Void;
    public function bodyResetMassProperties(body: RID): Void;
    public function bodySetAxisLock(body: RID, axis: Int, lock: Bool): Void;
    public function bodySetAxisVelocity(body: RID, axisVelocity: GdVector3): Void;
    public function bodySetCollisionLayer(body: RID, layer: Int): Void;
    public function bodySetCollisionMask(body: RID, mask: Int): Void;
    public function bodySetCollisionPriority(body: RID, priority: Float): Void;
    public function bodySetConstantForce(body: RID, force: GdVector3): Void;
    public function bodySetConstantTorque(body: RID, torque: GdVector3): Void;
    public function bodySetEnableContinuousCollisionDetection(body: RID, enable: Bool): Void;
    public function bodySetForceIntegrationCallback(body: RID, callable: Callable, userdata: Variant): Void;
    public function bodySetMaxContactsReported(body: RID, amount: Int): Void;
    public function bodySetMode(body: RID, mode: Int): Void;
    public function bodySetOmitForceIntegration(body: RID, enable: Bool): Void;
    public function bodySetParam(body: RID, param: Int, value: Variant): Void;
    public function bodySetRayPickable(body: RID, enable: Bool): Void;
    public function bodySetShape(body: RID, shapeIdx: Int, shape: RID): Void;
    public function bodySetShapeDisabled(body: RID, shapeIdx: Int, disabled: Bool): Void;
    public function bodySetShapeTransform(body: RID, shapeIdx: Int, transform: Transform3D): Void;
    public function bodySetSpace(body: RID, space: RID): Void;
    public function bodySetState(body: RID, state: Int, value: Variant): Void;
    public function bodySetStateSyncCallback(body: RID, callable: Callable): Void;
    public function bodyTestMotion(body: RID, parameters: PhysicsTestMotionParameters3D, result: PhysicsTestMotionResult3D): Bool;
    public function boxShapeCreate(): RID;
    public function capsuleShapeCreate(): RID;
    public function concavePolygonShapeCreate(): RID;
    public function coneTwistJointGetParam(joint: RID, param: Int): Float;
    public function coneTwistJointSetParam(joint: RID, param: Int, value: Float): Void;
    public function convexPolygonShapeCreate(): RID;
    public function customShapeCreate(): RID;
    public function cylinderShapeCreate(): RID;
    public function freeRid(rid: RID): Void;
    public function generic6dofJointGetFlag(joint: RID, axis: Int, flag: Int): Bool;
    public function generic6dofJointGetParam(joint: RID, axis: Int, param: Int): Float;
    public function generic6dofJointSetFlag(joint: RID, axis: Int, flag: Int, enable: Bool): Void;
    public function generic6dofJointSetParam(joint: RID, axis: Int, param: Int, value: Float): Void;
    public function getProcessInfo(processInfo: Int): Int;
    public function heightmapShapeCreate(): RID;
    public function hingeJointGetFlag(joint: RID, flag: Int): Bool;
    public function hingeJointGetParam(joint: RID, param: Int): Float;
    public function hingeJointSetFlag(joint: RID, flag: Int, enabled: Bool): Void;
    public function hingeJointSetParam(joint: RID, param: Int, value: Float): Void;
    public function jointClear(joint: RID): Void;
    public function jointCreate(): RID;
    public function jointDisableCollisionsBetweenBodies(joint: RID, disable: Bool): Void;
    public function jointGetSolverPriority(joint: RID): Int;
    public function jointGetType(joint: RID): Int;
    public function jointIsDisabledCollisionsBetweenBodies(joint: RID): Bool;
    public function jointMakeConeTwist(joint: RID, bodyA: RID, localRefA: Transform3D, bodyB: RID, localRefB: Transform3D): Void;
    public function jointMakeGeneric6dof(joint: RID, bodyA: RID, localRefA: Transform3D, bodyB: RID, localRefB: Transform3D): Void;
    public function jointMakeHinge(joint: RID, bodyA: RID, hingeA: Transform3D, bodyB: RID, hingeB: Transform3D): Void;
    public function jointMakePin(joint: RID, bodyA: RID, localA: GdVector3, bodyB: RID, localB: GdVector3): Void;
    public function jointMakeSlider(joint: RID, bodyA: RID, localRefA: Transform3D, bodyB: RID, localRefB: Transform3D): Void;
    public function jointSetSolverPriority(joint: RID, priority: Int): Void;
    public function pinJointGetLocalA(joint: RID): Vector3;
    public function pinJointGetLocalB(joint: RID): Vector3;
    public function pinJointGetParam(joint: RID, param: Int): Float;
    public function pinJointSetLocalA(joint: RID, localA: GdVector3): Void;
    public function pinJointSetLocalB(joint: RID, localB: GdVector3): Void;
    public function pinJointSetParam(joint: RID, param: Int, value: Float): Void;
    public function separationRayShapeCreate(): RID;
    public function setActive(active: Bool): Void;
    public function shapeGetData(shape: RID): Variant;
    public function shapeGetMargin(shape: RID): Float;
    public function shapeGetType(shape: RID): Int;
    public function shapeSetData(shape: RID, data: Variant): Void;
    public function shapeSetMargin(shape: RID, margin: Float): Void;
    public function sliderJointGetParam(joint: RID, param: Int): Float;
    public function sliderJointSetParam(joint: RID, param: Int, value: Float): Void;
    public function softBodyAddCollisionException(body: RID, bodyB: RID): Void;
    public function softBodyCreate(): RID;
    public function softBodyGetBounds(body: RID): AABB;
    public function softBodyGetCollisionLayer(body: RID): Int;
    public function softBodyGetCollisionMask(body: RID): Int;
    public function softBodyGetDampingCoefficient(body: RID): Float;
    public function softBodyGetDragCoefficient(body: RID): Float;
    public function softBodyGetLinearStiffness(body: RID): Float;
    public function softBodyGetPointGlobalPosition(body: RID, pointIndex: Int): Vector3;
    public function softBodyGetPressureCoefficient(body: RID): Float;
    public function softBodyGetSimulationPrecision(body: RID): Int;
    public function softBodyGetSpace(body: RID): RID;
    public function softBodyGetState(body: RID, state: Int): Variant;
    public function softBodyGetTotalMass(body: RID): Float;
    public function softBodyIsPointPinned(body: RID, pointIndex: Int): Bool;
    public function softBodyMovePoint(body: RID, pointIndex: Int, globalPosition: GdVector3): Void;
    public function softBodyPinPoint(body: RID, pointIndex: Int, pin: Bool): Void;
    public function softBodyRemoveAllPinnedPoints(body: RID): Void;
    public function softBodyRemoveCollisionException(body: RID, bodyB: RID): Void;
    public function softBodySetCollisionLayer(body: RID, layer: Int): Void;
    public function softBodySetCollisionMask(body: RID, mask: Int): Void;
    public function softBodySetDampingCoefficient(body: RID, dampingCoefficient: Float): Void;
    public function softBodySetDragCoefficient(body: RID, dragCoefficient: Float): Void;
    public function softBodySetLinearStiffness(body: RID, stiffness: Float): Void;
    public function softBodySetMesh(body: RID, mesh: RID): Void;
    public function softBodySetPressureCoefficient(body: RID, pressureCoefficient: Float): Void;
    public function softBodySetRayPickable(body: RID, enable: Bool): Void;
    public function softBodySetSimulationPrecision(body: RID, simulationPrecision: Int): Void;
    public function softBodySetSpace(body: RID, space: RID): Void;
    public function softBodySetState(body: RID, state: Int, variant: Variant): Void;
    public function softBodySetTotalMass(body: RID, totalMass: Float): Void;
    public function softBodySetTransform(body: RID, transform: Transform3D): Void;
    public function softBodyUpdateRenderingServer(body: RID, renderingServerHandler: PhysicsServer3DRenderingServerHandler): Void;
    public function spaceCreate(): RID;
    public function spaceGetDirectState(space: RID): PhysicsDirectSpaceState3D;
    public function spaceGetParam(space: RID, param: Int): Float;
    public function spaceIsActive(space: RID): Bool;
    public function spaceSetActive(space: RID, active: Bool): Void;
    public function spaceSetParam(space: RID, param: Int, value: Float): Void;
    public function sphereShapeCreate(): RID;
    public function worldBoundaryShapeCreate(): RID;
}
