package sunaba.godot;

import sunaba.core.Event;

@:native("godot.DisplayServer")
extern class DisplayServer extends Object {
    @:native("__new")
    public function new();
    public static function beep(): Void;
    public static function clipboardGet(): String;
    public static function clipboardGetImage(): Image;
    public static function clipboardGetPrimary(): String;
    public static function clipboardHas(): Bool;
    public static function clipboardHasImage(): Bool;
    public static function clipboardSet(clipboard: String): Void;
    public static function clipboardSetPrimary(clipboardPrimary: String): Void;
    public static function createStatusIndicator(icon: Texture2D, tooltip: String, callback: Callable): Int;
    public static function cursorGetShape(): Int;
    public static function cursorSetCustomImage(cursor: Resource, shape: Int = 0, ?hotspot: GdVector2): Void;
    public static function cursorSetShape(shape: Int): Void;
    public static function deleteStatusIndicator(id: Int): Void;
    public static function dialogInputText(title: String, description: String, existingText: String, callback: Callable): Int;
    public static function dialogShow(title: String, description: String, buttons: PackedStringArray, callback: Callable): Int;
    public static function enableForStealingFocus(processId: Int): Void;
    public static function fileDialogShow(title: String, currentDirectory: String, filename: String, showHidden: Bool, mode: Int, filters: PackedStringArray, callback: Callable): Int;
    public static function fileDialogWithOptionsShow(title: String, currentDirectory: String, root: String, filename: String, showHidden: Bool, mode: Int, filters: PackedStringArray, options: Dynamic, callback: Callable): Int;
    public static function forceProcessAndDropEvents(): Void;
    public static function getAccentColor(): Color;
    public static function getBaseColor(): Color;
    public static function getDisplayCutouts(): Dynamic;
    public static function getDisplaySafeArea(): Rect2i;
    public static function getKeyboardFocusScreen(): Int;
    public static function getName(): String;
    public static function getPrimaryScreen(): Int;
    public static function getScreenCount(): Int;
    public static function getScreenFromRect(rect: Rect2): Int;
    public static function getSwapCancelOk(): Bool;
    public static function getWindowAtScreenPosition(position: GdVector2i): Int;
    public static function getWindowList(): PackedInt32Array;
    public static function globalMenuAddCheckItem(menuRoot: String, label: String, ?callback: Callable, ?keyCallback: Callable, ?tag: Variant, accelerator: Int = 0, index: Int = -1): Int;
    public static function globalMenuAddIconCheckItem(menuRoot: String, icon: Texture2D, label: String, ?callback: Callable, ?keyCallback: Callable, ?tag: Variant, accelerator: Int = 0, index: Int = -1): Int;
    public static function globalMenuAddIconItem(menuRoot: String, icon: Texture2D, label: String, ?callback: Callable, ?keyCallback: Callable, ?tag: Variant, accelerator: Int = 0, index: Int = -1): Int;
    public static function globalMenuAddIconRadioCheckItem(menuRoot: String, icon: Texture2D, label: String, ?callback: Callable, ?keyCallback: Callable, ?tag: Variant, accelerator: Int = 0, index: Int = -1): Int;
    public static function globalMenuAddItem(menuRoot: String, label: String, ?callback: Callable, ?keyCallback: Callable, ?tag: Variant, accelerator: Int = 0, index: Int = -1): Int;
    public static function globalMenuAddMultistateItem(menuRoot: String, label: String, maxStates: Int, defaultState: Int, ?callback: Callable, ?keyCallback: Callable, ?tag: Variant, accelerator: Int = 0, index: Int = -1): Int;
    public static function globalMenuAddRadioCheckItem(menuRoot: String, label: String, ?callback: Callable, ?keyCallback: Callable, ?tag: Variant, accelerator: Int = 0, index: Int = -1): Int;
    public static function globalMenuAddSeparator(menuRoot: String, index: Int = -1): Int;
    public static function globalMenuAddSubmenuItem(menuRoot: String, label: String, submenu: String, index: Int = -1): Int;
    public static function globalMenuClear(menuRoot: String): Void;
    public static function globalMenuGetItemAccelerator(menuRoot: String, idx: Int): Int;
    public static function globalMenuGetItemCallback(menuRoot: String, idx: Int): Callable;
    public static function globalMenuGetItemCount(menuRoot: String): Int;
    public static function globalMenuGetItemIcon(menuRoot: String, idx: Int): Texture2D;
    public static function globalMenuGetItemIndentationLevel(menuRoot: String, idx: Int): Int;
    public static function globalMenuGetItemIndexFromTag(menuRoot: String, tag: Variant): Int;
    public static function globalMenuGetItemIndexFromText(menuRoot: String, text: String): Int;
    public static function globalMenuGetItemKeyCallback(menuRoot: String, idx: Int): Callable;
    public static function globalMenuGetItemMaxStates(menuRoot: String, idx: Int): Int;
    public static function globalMenuGetItemState(menuRoot: String, idx: Int): Int;
    public static function globalMenuGetItemSubmenu(menuRoot: String, idx: Int): String;
    public static function globalMenuGetItemTag(menuRoot: String, idx: Int): Variant;
    public static function globalMenuGetItemText(menuRoot: String, idx: Int): String;
    public static function globalMenuGetItemTooltip(menuRoot: String, idx: Int): String;
    public static function globalMenuGetSystemMenuRoots(): Map<Dynamic, Dynamic>;
    public static function globalMenuIsItemCheckable(menuRoot: String, idx: Int): Bool;
    public static function globalMenuIsItemChecked(menuRoot: String, idx: Int): Bool;
    public static function globalMenuIsItemDisabled(menuRoot: String, idx: Int): Bool;
    public static function globalMenuIsItemHidden(menuRoot: String, idx: Int): Bool;
    public static function globalMenuIsItemRadioCheckable(menuRoot: String, idx: Int): Bool;
    public static function globalMenuRemoveItem(menuRoot: String, idx: Int): Void;
    public static function globalMenuSetItemAccelerator(menuRoot: String, idx: Int, keycode: Int): Void;
    public static function globalMenuSetItemCallback(menuRoot: String, idx: Int, callback: Callable): Void;
    public static function globalMenuSetItemCheckable(menuRoot: String, idx: Int, checkable: Bool): Void;
    public static function globalMenuSetItemChecked(menuRoot: String, idx: Int, checked: Bool): Void;
    public static function globalMenuSetItemDisabled(menuRoot: String, idx: Int, disabled: Bool): Void;
    public static function globalMenuSetItemHidden(menuRoot: String, idx: Int, hidden: Bool): Void;
    public static function globalMenuSetItemHoverCallbacks(menuRoot: String, idx: Int, callback: Callable): Void;
    public static function globalMenuSetItemIcon(menuRoot: String, idx: Int, icon: Texture2D): Void;
    public static function globalMenuSetItemIndentationLevel(menuRoot: String, idx: Int, level: Int): Void;
    public static function globalMenuSetItemKeyCallback(menuRoot: String, idx: Int, keyCallback: Callable): Void;
    public static function globalMenuSetItemMaxStates(menuRoot: String, idx: Int, maxStates: Int): Void;
    public static function globalMenuSetItemRadioCheckable(menuRoot: String, idx: Int, checkable: Bool): Void;
    public static function globalMenuSetItemState(menuRoot: String, idx: Int, state: Int): Void;
    public static function globalMenuSetItemSubmenu(menuRoot: String, idx: Int, submenu: String): Void;
    public static function globalMenuSetItemTag(menuRoot: String, idx: Int, tag: Variant): Void;
    public static function globalMenuSetItemText(menuRoot: String, idx: Int, text: String): Void;
    public static function globalMenuSetItemTooltip(menuRoot: String, idx: Int, tooltip: String): Void;
    public static function globalMenuSetPopupCallbacks(menuRoot: String, openCallback: Callable, closeCallback: Callable): Void;
    public static function hasAdditionalOutputs(): Bool;
    public static function hasFeature(feature: Int): Bool;
    public static function hasHardwareKeyboard(): Bool;
    public static function helpSetSearchCallbacks(searchCallback: Callable, actionCallback: Callable): Void;
    public static function imeGetSelection(): Vector2i;
    public static function imeGetText(): String;
    public static function isDarkMode(): Bool;
    public static function isDarkModeSupported(): Bool;
    public static function isTouchscreenAvailable(): Bool;
    public static function isWindowTransparencyAvailable(): Bool;
    public static function keyboardGetCurrentLayout(): Int;
    public static function keyboardGetKeycodeFromPhysical(keycode: Int): Int;
    public static function keyboardGetLabelFromPhysical(keycode: Int): Int;
    public static function keyboardGetLayoutCount(): Int;
    public static function keyboardGetLayoutLanguage(index: Int): String;
    public static function keyboardGetLayoutName(index: Int): String;
    public static function keyboardSetCurrentLayout(index: Int): Void;
    public static function mouseGetButtonState(): Int;
    public static function mouseGetMode(): Int;
    public static function mouseGetPosition(): Vector2i;
    public static function mouseSetMode(mouseMode: Int): Void;
    public static function processEvents(): Void;
    public static function registerAdditionalOutput(object: Object): Void;
    public static function screenGetDpi(screen: Int = -1): Int;
    public static function screenGetImage(screen: Int = -1): Image;
    public static function screenGetImageRect(rect: Rect2i): Image;
    public static function screenGetMaxScale(): Float;
    public static function screenGetOrientation(screen: Int = -1): Int;
    public static function screenGetPixel(position: GdVector2i): Color;
    public static function screenGetPosition(screen: Int = -1): Vector2i;
    public static function screenGetRefreshRate(screen: Int = -1): Float;
    public static function screenGetScale(screen: Int = -1): Float;
    public static function screenGetSize(screen: Int = -1): Vector2i;
    public static function screenGetUsableRect(screen: Int = -1): Rect2i;
    public static function screenIsKeptOn(): Bool;
    public static function screenSetKeepOn(enable: Bool): Void;
    public static function screenSetOrientation(orientation: Int, screen: Int = -1): Void;
    public static function setIcon(image: Image): Void;
    public static function setNativeIcon(filename: String): Void;
    public static function setSystemThemeChangeCallback(callable: Callable): Void;
    public static function showEmojiAndSymbolPicker(): Void;
    public static function statusIndicatorGetRect(id: Int): Rect2;
    public static function statusIndicatorSetCallback(id: Int, callback: Callable): Void;
    public static function statusIndicatorSetIcon(id: Int, icon: Texture2D): Void;
    public static function statusIndicatorSetMenu(id: Int, menuRid: RID): Void;
    public static function statusIndicatorSetTooltip(id: Int, tooltip: String): Void;
    public static function tabletGetCurrentDriver(): String;
    public static function tabletGetDriverCount(): Int;
    public static function tabletGetDriverName(idx: Int): String;
    public static function tabletSetCurrentDriver(name: String): Void;
    public static function ttsGetVoices(): Dynamic;
    public static function ttsGetVoicesForLanguage(language: String): PackedStringArray;
    public static function ttsIsPaused(): Bool;
    public static function ttsIsSpeaking(): Bool;
    public static function ttsPause(): Void;
    public static function ttsResume(): Void;
    public static function ttsSetUtteranceCallback(event: Int, callable: Callable): Void;
    public static function ttsSpeak(text: String, voice: String, volume: Int = 50, pitch: Float = 1.0, rate: Float = 1.0, utteranceId: Int = 0, interrupt: Bool = false): Void;
    public static function ttsStop(): Void;
    public static function unregisterAdditionalOutput(object: Object): Void;
    public static function virtualKeyboardGetHeight(): Int;
    public static function virtualKeyboardHide(): Void;
    public static function virtualKeyboardShow(existingText: String, ?position: Rect2, type: Int = 0, maxLength: Int = -1, cursorStart: Int = -1, cursorEnd: Int = -1): Void;
    public static function warpMouse(position: GdVector2i): Void;
    public static function windowCanDraw(windowId: Int = 0): Bool;
    public static function windowGetActivePopup(): Int;
    public static function windowGetAttachedInstanceId(windowId: Int = 0): Int;
    public static function windowGetCurrentScreen(windowId: Int = 0): Int;
    public static function windowGetFlag(flag: Int, windowId: Int = 0): Bool;
    public static function windowGetMaxSize(windowId: Int = 0): Vector2i;
    public static function windowGetMinSize(windowId: Int = 0): Vector2i;
    public static function windowGetMode(windowId: Int = 0): Int;
    public static function windowGetNativeHandle(handleType: Int, windowId: Int = 0): Int;
    public static function windowGetPopupSafeRect(window: Int): Rect2i;
    public static function windowGetPosition(windowId: Int = 0): Vector2i;
    public static function windowGetPositionWithDecorations(windowId: Int = 0): Vector2i;
    public static function windowGetSafeTitleMargins(windowId: Int = 0): Vector3i;
    public static function windowGetSize(windowId: Int = 0): Vector2i;
    public static function windowGetSizeWithDecorations(windowId: Int = 0): Vector2i;
    public static function windowGetTitleSize(title: String, windowId: Int = 0): Vector2i;
    public static function windowGetVsyncMode(windowId: Int = 0): Int;
    public static function windowIsFocused(windowId: Int = 0): Bool;
    public static function windowIsMaximizeAllowed(windowId: Int = 0): Bool;
    public static function windowMaximizeOnTitleDblClick(): Bool;
    public static function windowMinimizeOnTitleDblClick(): Bool;
    public static function windowMoveToForeground(windowId: Int = 0): Void;
    public static function windowRequestAttention(windowId: Int = 0): Void;
    public static function windowSetCurrentScreen(screen: Int, windowId: Int = 0): Void;
    public static function windowSetDropFilesCallback(callback: Callable, windowId: Int = 0): Void;
    public static function windowSetExclusive(windowId: Int, exclusive: Bool): Void;
    public static function windowSetFlag(flag: Int, enabled: Bool, windowId: Int = 0): Void;
    public static function windowSetImeActive(active: Bool, windowId: Int = 0): Void;
    public static function windowSetImePosition(position: GdVector2i, windowId: Int = 0): Void;
    public static function windowSetInputEventCallback(callback: Callable, windowId: Int = 0): Void;
    public static function windowSetInputTextCallback(callback: Callable, windowId: Int = 0): Void;
    public static function windowSetMaxSize(maxSize: GdVector2i, windowId: Int = 0): Void;
    public static function windowSetMinSize(minSize: GdVector2i, windowId: Int = 0): Void;
    public static function windowSetMode(mode: Int, windowId: Int = 0): Void;
    public static function windowSetMousePassthrough(region: PackedVector2Array, windowId: Int = 0): Void;
    public static function windowSetPopupSafeRect(window: Int, rect: Rect2i): Void;
    public static function windowSetPosition(position: GdVector2i, windowId: Int = 0): Void;
    public static function windowSetRectChangedCallback(callback: Callable, windowId: Int = 0): Void;
    public static function windowSetSize(size: GdVector2i, windowId: Int = 0): Void;
    public static function windowSetTitle(title: String, windowId: Int = 0): Void;
    public static function windowSetTransient(windowId: Int, parentWindowId: Int): Void;
    public static function windowSetVsyncMode(vsyncMode: Int, windowId: Int = 0): Void;
    public static function windowSetWindowButtonsOffset(offset: GdVector2i, windowId: Int = 0): Void;
    public static function windowSetWindowEventCallback(callback: Callable, windowId: Int = 0): Void;
    public static function windowStartDrag(windowId: Int = 0): Void;
    public static function windowStartResize(edge: Int, windowId: Int = 0): Void;
}
