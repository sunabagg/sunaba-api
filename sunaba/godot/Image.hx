package sunaba.godot;

import sunaba.core.Event;

@:native("godot.Image")
extern class Image extends Resource {
    public var data: Map<Dynamic, Dynamic>;
    @:native("__new")
    public function new();
    public function adjustBcs(brightness: Float, contrast: Float, saturation: Float): Void;
    public function blendRect(src: Image, srcRect: Rect2i, dst: GdVector2i): Void;
    public function blendRectMask(src: Image, mask: Image, srcRect: Rect2i, dst: GdVector2i): Void;
    public function blitRect(src: Image, srcRect: Rect2i, dst: GdVector2i): Void;
    public function blitRectMask(src: Image, mask: Image, srcRect: Rect2i, dst: GdVector2i): Void;
    public function bumpMapToNormalMap(bumpScale: Float = 1.0): Void;
    public function clearMipmaps(): Void;
    public function compress(mode: Int, source: Int = 0, astcFormat: Int = 0): Int;
    public function compressFromChannels(mode: Int, channels: Int, astcFormat: Int = 0): Int;
    public function computeImageMetrics(comparedImage: Image, useLuma: Bool): Map<Dynamic, Dynamic>;
    public function convert(format: Int): Void;
    public function copyFrom(src: Image): Void;
    public static function create(width: Int, height: Int, useMipmaps: Bool, format: Int): Image;
    public static function createEmpty(width: Int, height: Int, useMipmaps: Bool, format: Int): Image;
    public static function createFromData(width: Int, height: Int, useMipmaps: Bool, format: Int, data: PackedByteArray): Image;
    public function crop(width: Int, height: Int): Void;
    public function decompress(): Int;
    public function detectAlpha(): Int;
    public function detectUsedChannels(source: Int = 0): Int;
    public function fill(color: Color): Void;
    public function fillRect(rect: Rect2i, color: Color): Void;
    public function fixAlphaEdges(): Void;
    public function flipX(): Void;
    public function flipY(): Void;
    public function generateMipmaps(renormalize: Bool = false): Int;
    public function getData(): PackedByteArray;
    public function getDataSize(): Int;
    public function getFormat(): Int;
    public function getHeight(): Int;
    public function getMipmapCount(): Int;
    public function getMipmapOffset(mipmap: Int): Int;
    public function getPixel(x: Int, y: Int): Color;
    public function getPixelv(point: GdVector2i): Color;
    public function getRegion(region: Rect2i): Image;
    public function getSize(): Vector2i;
    public function getUsedRect(): Rect2i;
    public function getWidth(): Int;
    public function hasMipmaps(): Bool;
    public function isCompressed(): Bool;
    public function isEmpty(): Bool;
    public function isInvisible(): Bool;
    public function linearToSrgb(): Void;
    public function load(path: String): Int;
    public function loadBmpFromBuffer(buffer: PackedByteArray): Int;
    public static function loadFromFile(path: String): Image;
    public function loadJpgFromBuffer(buffer: PackedByteArray): Int;
    public function loadKtxFromBuffer(buffer: PackedByteArray): Int;
    public function loadPngFromBuffer(buffer: PackedByteArray): Int;
    public function loadSvgFromBuffer(buffer: PackedByteArray, scale: Float = 1.0): Int;
    public function loadSvgFromString(svgStr: String, scale: Float = 1.0): Int;
    public function loadTgaFromBuffer(buffer: PackedByteArray): Int;
    public function loadWebpFromBuffer(buffer: PackedByteArray): Int;
    public function normalMapToXy(): Void;
    public function premultiplyAlpha(): Void;
    public function resize(width: Int, height: Int, interpolation: Int = 1): Void;
    public function resizeToPo2(square: Bool = false, interpolation: Int = 1): Void;
    public function rgbeToSrgb(): Image;
    public function rotate90(direction: Int): Void;
    public function rotate180(): Void;
    public function saveExr(path: String, grayscale: Bool = false): Int;
    public function saveExrToBuffer(grayscale: Bool = false): PackedByteArray;
    public function saveJpg(path: String, quality: Float = 0.75): Int;
    public function saveJpgToBuffer(quality: Float = 0.75): PackedByteArray;
    public function savePng(path: String): Int;
    public function savePngToBuffer(): PackedByteArray;
    public function saveWebp(path: String, lossy: Bool = false, quality: Float = 0.75): Int;
    public function saveWebpToBuffer(lossy: Bool = false, quality: Float = 0.75): PackedByteArray;
    public function setData(width: Int, height: Int, useMipmaps: Bool, format: Int, data: PackedByteArray): Void;
    public function setPixel(x: Int, y: Int, color: Color): Void;
    public function setPixelv(point: GdVector2i, color: Color): Void;
    public function shrinkX2(): Void;
    public function srgbToLinear(): Void;
}
