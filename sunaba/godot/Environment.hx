package sunaba.godot;

import sunaba.core.NativeEvent;

@:native("godot.Environment")
extern class Environment extends Resource {
    public var adjustmentBrightness: Float;
    public var adjustmentColorCorrection: Texture;
    public var adjustmentContrast: Float;
    public var adjustmentEnabled: Bool;
    public var adjustmentSaturation: Float;
    public var ambientLightColor: Color;
    public var ambientLightEnergy: Float;
    public var ambientLightSkyContribution: Float;
    public var ambientLightSource: Int;
    public var backgroundCameraFeedId: Int;
    public var backgroundCanvasMaxLayer: Int;
    public var backgroundColor: Color;
    public var backgroundEnergyMultiplier: Float;
    public var backgroundIntensity: Float;
    public var backgroundMode: Int;
    public var fogAerialPerspective: Float;
    public var fogDensity: Float;
    public var fogDepthBegin: Float;
    public var fogDepthCurve: Float;
    public var fogDepthEnd: Float;
    public var fogEnabled: Bool;
    public var fogHeight: Float;
    public var fogHeightDensity: Float;
    public var fogLightColor: Color;
    public var fogLightEnergy: Float;
    public var fogMode: Int;
    public var fogSkyAffect: Float;
    public var fogSunScatter: Float;
    public var glowBlendMode: Int;
    public var glowBloom: Float;
    public var glowEnabled: Bool;
    public var glowHdrLuminanceCap: Float;
    public var glowHdrScale: Float;
    public var glowHdrThreshold: Float;
    public var glowIntensity: Float;
    public var glowLevels1: Float;
    public var glowLevels2: Float;
    public var glowLevels3: Float;
    public var glowLevels4: Float;
    public var glowLevels5: Float;
    public var glowLevels6: Float;
    public var glowLevels7: Float;
    public var glowMap: Texture;
    public var glowMapStrength: Float;
    public var glowMix: Float;
    public var glowNormalized: Bool;
    public var glowStrength: Float;
    public var reflectedLightSource: Int;
    public var sdfgiBounceFeedback: Float;
    public var sdfgiCascade0Distance: Float;
    public var sdfgiCascades: Int;
    public var sdfgiEnabled: Bool;
    public var sdfgiEnergy: Float;
    public var sdfgiMaxDistance: Float;
    public var sdfgiMinCellSize: Float;
    public var sdfgiNormalBias: Float;
    public var sdfgiProbeBias: Float;
    public var sdfgiReadSkyLight: Bool;
    public var sdfgiUseOcclusion: Bool;
    public var sdfgiYScale: Int;
    public var sky: Sky;
    public var skyCustomFov: Float;
    public var skyRotation: Vector3;
    public var ssaoAoChannelAffect: Float;
    public var ssaoDetail: Float;
    public var ssaoEnabled: Bool;
    public var ssaoHorizon: Float;
    public var ssaoIntensity: Float;
    public var ssaoLightAffect: Float;
    public var ssaoPower: Float;
    public var ssaoRadius: Float;
    public var ssaoSharpness: Float;
    public var ssilEnabled: Bool;
    public var ssilIntensity: Float;
    public var ssilNormalRejection: Float;
    public var ssilRadius: Float;
    public var ssilSharpness: Float;
    public var ssrDepthTolerance: Float;
    public var ssrEnabled: Bool;
    public var ssrFadeIn: Float;
    public var ssrFadeOut: Float;
    public var ssrMaxSteps: Int;
    public var tonemapExposure: Float;
    public var tonemapMode: Int;
    public var tonemapWhite: Float;
    public var volumetricFogAlbedo: Color;
    public var volumetricFogAmbientInject: Float;
    public var volumetricFogAnisotropy: Float;
    public var volumetricFogDensity: Float;
    public var volumetricFogDetailSpread: Float;
    public var volumetricFogEmission: Color;
    public var volumetricFogEmissionEnergy: Float;
    public var volumetricFogEnabled: Bool;
    public var volumetricFogGiInject: Float;
    public var volumetricFogLength: Float;
    public var volumetricFogSkyAffect: Float;
    public var volumetricFogTemporalReprojectionAmount: Float;
    public var volumetricFogTemporalReprojectionEnabled: Bool;
    @:native("__new")
    public function new();
    public function getGlowLevel(idx: Int): Float;
    public function setGlowLevel(idx: Int, intensity: Float): Void;
}
