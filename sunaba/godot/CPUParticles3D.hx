package sunaba.godot;

import sunaba.core.NativeEvent;

@:native("godot.CPUParticles3D")
extern class CPUParticles3D extends GeometryInstance3D {
    public var amount: Int;
    public var angleCurve: Curve;
    public var angleMax: Float;
    public var angleMin: Float;
    public var angularVelocityCurve: Curve;
    public var angularVelocityMax: Float;
    public var angularVelocityMin: Float;
    public var animOffsetCurve: Curve;
    public var animOffsetMax: Float;
    public var animOffsetMin: Float;
    public var animSpeedCurve: Curve;
    public var animSpeedMax: Float;
    public var animSpeedMin: Float;
    public var color: Color;
    public var colorInitialRamp: Gradient;
    public var colorRamp: Gradient;
    public var dampingCurve: Curve;
    public var dampingMax: Float;
    public var dampingMin: Float;
    public var direction: Vector3;
    public var drawOrder: Int;
    public var emissionBoxExtents: Vector3;
    public var emissionColors: PackedColorArray;
    public var emissionNormals: PackedVector3Array;
    public var emissionPoints: PackedVector3Array;
    public var emissionRingAxis: Vector3;
    public var emissionRingConeAngle: Float;
    public var emissionRingHeight: Float;
    public var emissionRingInnerRadius: Float;
    public var emissionRingRadius: Float;
    public var emissionShape: Int;
    public var emissionSphereRadius: Float;
    public var emitting: Bool;
    public var explosiveness: Float;
    public var fixedFps: Int;
    public var flatness: Float;
    public var fractDelta: Bool;
    public var gravity: Vector3;
    public var hueVariationCurve: Curve;
    public var hueVariationMax: Float;
    public var hueVariationMin: Float;
    public var initialVelocityMax: Float;
    public var initialVelocityMin: Float;
    public var lifetime: Float;
    public var lifetimeRandomness: Float;
    public var linearAccelCurve: Curve;
    public var linearAccelMax: Float;
    public var linearAccelMin: Float;
    public var localCoords: Bool;
    public var mesh: Mesh;
    public var oneShot: Bool;
    public var orbitVelocityCurve: Curve;
    public var orbitVelocityMax: Float;
    public var orbitVelocityMin: Float;
    public var particleFlagAlignY: Bool;
    public var particleFlagDisableZ: Bool;
    public var particleFlagRotateY: Bool;
    public var preprocess: Float;
    public var radialAccelCurve: Curve;
    public var radialAccelMax: Float;
    public var radialAccelMin: Float;
    public var randomness: Float;
    public var scaleAmountCurve: Curve;
    public var scaleAmountMax: Float;
    public var scaleAmountMin: Float;
    public var scaleCurveX: Curve;
    public var scaleCurveY: Curve;
    public var scaleCurveZ: Curve;
    public var seed: Int;
    public var speedScale: Float;
    public var splitScale: Bool;
    public var spread: Float;
    public var tangentialAccelCurve: Curve;
    public var tangentialAccelMax: Float;
    public var tangentialAccelMin: Float;
    public var useFixedSeed: Bool;
    public var visibilityAabb: AABB;
    @:native("__new")
    public function new();
    public function captureAabb(): AABB;
    public function convertFromParticles(particles: Node): Void;
    public function getParamCurve(param: Int): Curve;
    public function getParamMax(param: Int): Float;
    public function getParamMin(param: Int): Float;
    public function getParticleFlag(particleFlag: Int): Bool;
    public function requestParticlesProcess(processTime: Float): Void;
    public function restart(keepSeed: Bool = false): Void;
    public function setParamCurve(param: Int, curve: Curve): Void;
    public function setParamMax(param: Int, value: Float): Void;
    public function setParamMin(param: Int, value: Float): Void;
    public function setParticleFlag(particleFlag: Int, enable: Bool): Void;
    public var finished: NativeEvent;
}
