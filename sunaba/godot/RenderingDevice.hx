package sunaba.godot;

import sunaba.core.NativeEvent;

@:native("godot.RenderingDevice")
extern class RenderingDevice extends Object {
    @:native("__new")
    public function new();
    public function barrier(from: Int = 32767, to: Int = 32767): Void;
    public function bufferClear(buffer: RID, offset: Int, sizeBytes: Int): Int;
    public function bufferCopy(srcBuffer: RID, dstBuffer: RID, srcOffset: Int, dstOffset: Int, size: Int): Int;
    public function bufferGetData(buffer: RID, offsetBytes: Int = 0, sizeBytes: Int = 0): PackedByteArray;
    public function bufferGetDataAsync(buffer: RID, callback: Callable, offsetBytes: Int = 0, sizeBytes: Int = 0): Int;
    public function bufferGetDeviceAddress(buffer: RID): Int;
    public function bufferUpdate(buffer: RID, offset: Int, sizeBytes: Int, data: PackedByteArray): Int;
    public function captureTimestamp(name: String): Void;
    public function computeListAddBarrier(computeList: Int): Void;
    public function computeListBegin(): Int;
    public function computeListBindComputePipeline(computeList: Int, computePipeline: RID): Void;
    public function computeListBindUniformSet(computeList: Int, uniformSet: RID, setIndex: Int): Void;
    public function computeListDispatch(computeList: Int, xGroups: Int, yGroups: Int, zGroups: Int): Void;
    public function computeListDispatchIndirect(computeList: Int, buffer: RID, offset: Int): Void;
    public function computeListEnd(): Void;
    public function computeListSetPushConstant(computeList: Int, buffer: PackedByteArray, sizeBytes: Int): Void;
    public function computePipelineCreate(shader: RID, ?specializationConstants: Dynamic): RID;
    public function computePipelineIsValid(computePipeline: RID): Bool;
    public function createLocalDevice(): RenderingDevice;
    public function drawCommandBeginLabel(name: String, color: Color): Void;
    public function drawCommandEndLabel(): Void;
    public function drawCommandInsertLabel(name: String, color: Color): Void;
    public function drawListBegin(framebuffer: RID, drawFlags: Int = 0, ?clearColorValues: PackedColorArray, clearDepthValue: Float = 1.0, clearStencilValue: Int = 0, ?region: Rect2, breadcrumb: Int = 0): Int;
    public function drawListBeginForScreen(screen: Int = 0, ?clearColor: Color): Int;
    public function drawListBeginSplit(framebuffer: RID, splits: Int, initialColorAction: Int, finalColorAction: Int, initialDepthAction: Int, finalDepthAction: Int, ?clearColorValues: PackedColorArray, clearDepth: Float = 1.0, clearStencil: Int = 0, ?region: Rect2, ?storageTextures: Dynamic): PackedInt64Array;
    public function drawListBindIndexArray(drawList: Int, indexArray: RID): Void;
    public function drawListBindRenderPipeline(drawList: Int, renderPipeline: RID): Void;
    public function drawListBindUniformSet(drawList: Int, uniformSet: RID, setIndex: Int): Void;
    public function drawListBindVertexArray(drawList: Int, vertexArray: RID): Void;
    public function drawListDisableScissor(drawList: Int): Void;
    public function drawListDraw(drawList: Int, useIndices: Bool, instances: Int, proceduralVertexCount: Int = 0): Void;
    public function drawListDrawIndirect(drawList: Int, useIndices: Bool, buffer: RID, offset: Int = 0, drawCount: Int = 1, stride: Int = 0): Void;
    public function drawListEnableScissor(drawList: Int, ?rect: Rect2): Void;
    public function drawListEnd(): Void;
    public function drawListSetBlendConstants(drawList: Int, color: Color): Void;
    public function drawListSetPushConstant(drawList: Int, buffer: PackedByteArray, sizeBytes: Int): Void;
    public function drawListSwitchToNextPass(): Int;
    public function drawListSwitchToNextPassSplit(splits: Int): PackedInt64Array;
    public function framebufferCreate(textures: Dynamic, validateWithFormat: Int = -1, viewCount: Int = 1): RID;
    public function framebufferCreateEmpty(size: GdVector2i, samples: Int = 0, validateWithFormat: Int = -1): RID;
    public function framebufferCreateMultipass(textures: Dynamic, passes: Dynamic, validateWithFormat: Int = -1, viewCount: Int = 1): RID;
    public function framebufferFormatCreate(attachments: Dynamic, viewCount: Int = 1): Int;
    public function framebufferFormatCreateEmpty(samples: Int = 0): Int;
    public function framebufferFormatCreateMultipass(attachments: Dynamic, passes: Dynamic, viewCount: Int = 1): Int;
    public function framebufferFormatGetTextureSamples(format: Int, renderPass: Int = 0): Int;
    public function framebufferGetFormat(framebuffer: RID): Int;
    public function framebufferIsValid(framebuffer: RID): Bool;
    public function freeRid(rid: RID): Void;
    public function fullBarrier(): Void;
    public function getCapturedTimestampCpuTime(index: Int): Int;
    public function getCapturedTimestampGpuTime(index: Int): Int;
    public function getCapturedTimestampName(index: Int): String;
    public function getCapturedTimestampsCount(): Int;
    public function getCapturedTimestampsFrame(): Int;
    public function getDeviceAllocationCount(): Int;
    public function getDeviceAllocsByObjectType(type: Int): Int;
    public function getDeviceMemoryByObjectType(type: Int): Int;
    public function getDeviceName(): String;
    public function getDevicePipelineCacheUuid(): String;
    public function getDeviceTotalMemory(): Int;
    public function getDeviceVendorName(): String;
    public function getDriverAllocationCount(): Int;
    public function getDriverAllocsByObjectType(type: Int): Int;
    public function getDriverAndDeviceMemoryReport(): String;
    public function getDriverMemoryByObjectType(type: Int): Int;
    public function getDriverResource(resource: Int, rid: RID, index: Int): Int;
    public function getDriverTotalMemory(): Int;
    public function getFrameDelay(): Int;
    public function getMemoryUsage(type: Int): Int;
    public function getPerfReport(): String;
    public function getTrackedObjectName(typeIndex: Int): String;
    public function getTrackedObjectTypeCount(): Int;
    public function hasFeature(feature: Int): Bool;
    public function indexArrayCreate(indexBuffer: RID, indexOffset: Int, indexCount: Int): RID;
    public function indexBufferCreate(sizeIndices: Int, format: Int, ?data: PackedByteArray, useRestartIndices: Bool = false, creationBits: Int = 0): RID;
    public function limitGet(limit: Int): Int;
    public function renderPipelineCreate(shader: RID, framebufferFormat: Int, vertexFormat: Int, primitive: Int, rasterizationState: RDPipelineRasterizationState, multisampleState: RDPipelineMultisampleState, stencilState: RDPipelineDepthStencilState, colorBlendState: RDPipelineColorBlendState, dynamicStateFlags: Int = 0, forRenderPass: Int = 0, ?specializationConstants: Dynamic): RID;
    public function renderPipelineIsValid(renderPipeline: RID): Bool;
    public function samplerCreate(state: RDSamplerState): RID;
    public function samplerIsFormatSupportedForFilter(format: Int, samplerFilter: Int): Bool;
    public function screenGetFramebufferFormat(screen: Int = 0): Int;
    public function screenGetHeight(screen: Int = 0): Int;
    public function screenGetWidth(screen: Int = 0): Int;
    public function setResourceName(id: RID, name: String): Void;
    public function shaderCompileBinaryFromSpirv(spirvData: RDShaderSPIRV, ?name: String): PackedByteArray;
    public function shaderCompileSpirvFromSource(shaderSource: RDShaderSource, allowCache: Bool = true): RDShaderSPIRV;
    public function shaderCreateFromBytecode(binaryData: PackedByteArray, ?placeholderRid: RID): RID;
    public function shaderCreateFromSpirv(spirvData: RDShaderSPIRV, ?name: String): RID;
    public function shaderCreatePlaceholder(): RID;
    public function shaderGetVertexInputAttributeMask(shader: RID): Int;
    public function storageBufferCreate(sizeBytes: Int, ?data: PackedByteArray, usage: Int = 0, creationBits: Int = 0): RID;
    public function submit(): Void;
    public function sync(): Void;
    public function textureBufferCreate(sizeBytes: Int, format: Int, ?data: PackedByteArray): RID;
    public function textureClear(texture: RID, color: Color, baseMipmap: Int, mipmapCount: Int, baseLayer: Int, layerCount: Int): Int;
    public function textureCopy(fromTexture: RID, toTexture: RID, fromPos: GdVector3, toPos: GdVector3, size: GdVector3, srcMipmap: Int, dstMipmap: Int, srcLayer: Int, dstLayer: Int): Int;
    public function textureCreate(format: RDTextureFormat, view: RDTextureView, ?data: Dynamic): RID;
    public function textureCreateFromExtension(type: Int, format: Int, samples: Int, usageFlags: Int, image: Int, width: Int, height: Int, depth: Int, layers: Int): RID;
    public function textureCreateShared(view: RDTextureView, withTexture: RID): RID;
    public function textureCreateSharedFromSlice(view: RDTextureView, withTexture: RID, layer: Int, mipmap: Int, mipmaps: Int = 1, sliceType: Int = 0): RID;
    public function textureGetData(texture: RID, layer: Int): PackedByteArray;
    public function textureGetDataAsync(texture: RID, layer: Int, callback: Callable): Int;
    public function textureGetFormat(texture: RID): RDTextureFormat;
    public function textureGetNativeHandle(texture: RID): Int;
    public function textureIsDiscardable(texture: RID): Bool;
    public function textureIsFormatSupportedForUsage(format: Int, usageFlags: Int): Bool;
    public function textureIsShared(texture: RID): Bool;
    public function textureIsValid(texture: RID): Bool;
    public function textureResolveMultisample(fromTexture: RID, toTexture: RID): Int;
    public function textureSetDiscardable(texture: RID, discardable: Bool): Void;
    public function textureUpdate(texture: RID, layer: Int, data: PackedByteArray): Int;
    public function uniformBufferCreate(sizeBytes: Int, ?data: PackedByteArray, creationBits: Int = 0): RID;
    public function uniformSetCreate(uniforms: Dynamic, shader: RID, shaderSet: Int): RID;
    public function uniformSetIsValid(uniformSet: RID): Bool;
    public function vertexArrayCreate(vertexCount: Int, vertexFormat: Int, srcBuffers: Dynamic, ?offsets: PackedInt64Array): RID;
    public function vertexBufferCreate(sizeBytes: Int, ?data: PackedByteArray, creationBits: Int = 0): RID;
    public function vertexFormatCreate(vertexDescriptions: Dynamic): Int;
}
